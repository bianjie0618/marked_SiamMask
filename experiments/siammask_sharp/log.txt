[2020-06-13 15:54:41,504-rk0-train_siammask_refine.py#123] 
PyTorch version: 1.0.0
Is debug build: No
CUDA used to build PyTorch: 10.0.130

OS: Ubuntu 18.04.4 LTS
GCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CMake version: version 3.10.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: Could not collect
GPU models and configuration: GPU 0: GeForce RTX 2060
Nvidia driver version: 435.21
cuDNN version: Probably one of the following:
/usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.5
/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a

Versions of relevant libraries:
[pip3] torch (1.0.0)
[conda] torch                     1.0.0                    pypi_0    pypi
[conda] torchvision               0.2.1                    pypi_0    pypi
        OpenCV (3.4.3)
[2020-06-13 15:54:41,505-rk0-train_siammask_refine.py#124] Namespace(arch='', batch=64, clip=10.0, config='config.json', epochs=20, log='log.txt', log_dir='board', lr=0.001, momentum=0.9, pretrained='True', print_freq=10, resume='', save_dir='snapshot', start_epoch=0, weight_decay=0.0001, workers=20)
[2020-06-13 15:54:41,512-rk0-train_siammask_refine.py#127] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8,
        "out_size": 127,
        "seg_thr": 0.35,
        "penalty_k": 0.04,
        "window_influence": 0.4,
        "lr": 1.0
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 0.0025
    },
    "loss": {
        "weight": [
            0,
            0,
            36
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "ytb_vos": {
                "root": "../../data/ytb_vos/crop511",
                "anno": "../../data/ytb_vos/train.json",
                "num_use": 100000,
                "frame_range": 20
            },
            "coco": {
                "root": "../../data/coco/crop511",
                "anno": "../../data/coco/train2017.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 143,
        "base_size": 0,
        "size": 3,
        "num": 200000,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 8,
                "scale": 0.18,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.25
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2020-06-13 15:54:41,514-rk0-train_siammask_refine.py# 79] build train dataset
[2020-06-13 15:54:41,515-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 15:54:41,747-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 15:54:41,800-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 15:54:41,800-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 15:54:44,257-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 15:54:45,873-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 15:54:45,952-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 15:54:50,728-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 15:54:50,728-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 15:54:50,729-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 15:54:55,338-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 15:54:55,339-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 15:54:55,340-rk0-train_siammask_refine.py# 83] build val dataset
[2020-06-13 15:54:55,340-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 15:54:55,617-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 15:54:55,668-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 15:54:55,668-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 15:54:58,339-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 15:54:59,978-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 15:55:00,042-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 15:55:00,276-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 15:55:00,276-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 15:55:00,277-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 15:55:00,513-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 15:55:00,513-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 15:55:00,514-rk0-train_siammask_refine.py# 94] build dataset done
[2020-06-13 15:55:00,772-rk0-features.py# 67] Current training 0 layers:
	[]
[2020-06-13 15:55:00,773-rk0-features.py# 67] Current training 1 layers:
	[ResDownS(
  (downsample): Sequential(
    (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
)]
[2020-06-13 15:55:00,831-rk0-train_siammask_refine.py#143] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (mask_model): MaskCorr(
    (mask): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 3969, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (refine_model): Refine(
    (v0): Sequential(
      (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v1): Sequential(
      (0): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v2): Sequential(
      (0): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h2): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h1): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h0): Sequential(
      (0): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (deconv): ConvTranspose2d(256, 32, kernel_size=(15, 15), stride=(15, 15))
    (post0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post1): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post2): Conv2d(4, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[2020-06-13 15:55:00,833-rk0-load_helper.py# 31] load pretrained model from True
[2020-06-13 15:56:48,485-rk0-train_siammask_refine.py#123] 
PyTorch version: 1.0.0
Is debug build: No
CUDA used to build PyTorch: 10.0.130

OS: Ubuntu 18.04.4 LTS
GCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CMake version: version 3.10.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: Could not collect
GPU models and configuration: GPU 0: GeForce RTX 2060
Nvidia driver version: 435.21
cuDNN version: Probably one of the following:
/usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.5
/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a

Versions of relevant libraries:
[pip3] torch (1.0.0)
[conda] torch                     1.0.0                    pypi_0    pypi
[conda] torchvision               0.2.1                    pypi_0    pypi
        OpenCV (3.4.3)
[2020-06-13 15:56:48,485-rk0-train_siammask_refine.py#124] Namespace(arch='', batch=64, clip=10.0, config='config.json', epochs=20, log='log.txt', log_dir='board', lr=0.001, momentum=0.9, pretrained='resnet.model', print_freq=10, resume='', save_dir='snapshot', start_epoch=0, weight_decay=0.0001, workers=20)
[2020-06-13 15:56:48,485-rk0-train_siammask_refine.py#127] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8,
        "out_size": 127,
        "seg_thr": 0.35,
        "penalty_k": 0.04,
        "window_influence": 0.4,
        "lr": 1.0
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 0.0025
    },
    "loss": {
        "weight": [
            0,
            0,
            36
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "ytb_vos": {
                "root": "../../data/ytb_vos/crop511",
                "anno": "../../data/ytb_vos/train.json",
                "num_use": 100000,
                "frame_range": 20
            },
            "coco": {
                "root": "../../data/coco/crop511",
                "anno": "../../data/coco/train2017.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 143,
        "base_size": 0,
        "size": 3,
        "num": 200000,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 8,
                "scale": 0.18,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.25
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2020-06-13 15:56:48,486-rk0-train_siammask_refine.py# 79] build train dataset
[2020-06-13 15:56:48,487-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 15:56:48,741-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 15:56:48,794-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 15:56:48,794-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 15:56:51,267-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 15:56:52,835-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 15:56:52,903-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 15:56:57,441-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 15:56:57,441-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 15:56:57,442-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 15:57:02,001-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 15:57:02,001-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 15:57:02,002-rk0-train_siammask_refine.py# 83] build val dataset
[2020-06-13 15:57:02,003-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 15:57:02,299-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 15:57:02,350-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 15:57:02,351-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 15:57:05,091-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 15:57:06,697-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 15:57:06,760-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 15:57:07,003-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 15:57:07,004-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 15:57:07,012-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 15:57:07,245-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 15:57:07,245-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 15:57:07,246-rk0-train_siammask_refine.py# 94] build dataset done
[2020-06-13 15:57:07,470-rk0-features.py# 67] Current training 0 layers:
	[]
[2020-06-13 15:57:07,471-rk0-features.py# 67] Current training 1 layers:
	[ResDownS(
  (downsample): Sequential(
    (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
)]
[2020-06-13 15:57:07,526-rk0-train_siammask_refine.py#143] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (mask_model): MaskCorr(
    (mask): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 3969, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (refine_model): Refine(
    (v0): Sequential(
      (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v1): Sequential(
      (0): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v2): Sequential(
      (0): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h2): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h1): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h0): Sequential(
      (0): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (deconv): ConvTranspose2d(256, 32, kernel_size=(15, 15), stride=(15, 15))
    (post0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post1): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post2): Conv2d(4, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[2020-06-13 15:57:07,529-rk0-load_helper.py# 31] load pretrained model from resnet.model
[2020-06-13 15:57:10,237-rk0-load_helper.py# 25] remove prefix 'module.'
[2020-06-13 15:57:10,238-rk0-load_helper.py# 13] [Warning] missing keys: {'features.features.layer1.0.bn2.bias', 'features.features.layer3.3.bn2.weight', 'rpn_model.loc.head.1.num_batches_tracked', 'features.features.layer3.0.downsample.1.running_mean', 'rpn_model.loc.conv_kernel.1.running_mean', 'features.features.layer3.3.bn3.num_batches_tracked', 'mask_model.mask.conv_search.1.running_var', 'features.features.layer3.5.bn3.weight', 'features.features.layer3.4.conv1.weight', 'refine_model.post1.bias', 'features.features.layer2.1.bn2.bias', 'mask_model.mask.conv_search.1.bias', 'features.downsample.downsample.0.weight', 'rpn_model.loc.conv_kernel.1.running_var', 'features.features.layer2.3.conv2.weight', 'features.features.layer2.2.bn1.running_var', 'features.features.layer2.3.bn1.bias', 'features.features.layer3.1.conv2.weight', 'features.features.layer3.2.bn1.running_mean', 'features.features.layer3.2.bn3.bias', 'rpn_model.loc.conv_search.1.bias', 'features.features.layer1.0.bn1.bias', 'features.features.layer2.3.bn1.running_var', 'features.features.layer2.0.bn3.bias', 'rpn_model.cls.head.3.weight', 'features.features.layer3.5.bn1.num_batches_tracked', 'features.features.layer3.0.downsample.1.running_var', 'features.features.layer2.3.bn3.running_mean', 'refine_model.v2.0.weight', 'features.features.layer3.5.bn1.bias', 'refine_model.post2.bias', 'features.downsample.downsample.1.running_var', 'features.features.layer3.3.bn3.running_mean', 'mask_model.mask.head.1.num_batches_tracked', 'features.features.layer3.5.bn1.weight', 'features.features.layer1.0.downsample.0.weight', 'features.features.layer3.0.downsample.1.bias', 'rpn_model.cls.conv_search.1.bias', 'refine_model.v0.2.weight', 'features.features.layer3.5.conv3.weight', 'mask_model.mask.head.1.weight', 'features.features.layer2.2.conv1.weight', 'features.features.layer2.2.bn3.running_var', 'features.features.layer3.1.bn1.bias', 'rpn_model.cls.head.1.weight', 'features.features.layer3.2.bn3.weight', 'rpn_model.loc.head.1.running_mean', 'features.features.layer1.2.conv3.weight', 'mask_model.mask.conv_kernel.1.running_var', 'features.features.layer3.4.bn2.running_var', 'features.features.layer2.0.downsample.1.bias', 'features.features.layer2.2.bn2.bias', 'features.features.layer3.3.bn1.bias', 'rpn_model.cls.head.1.bias', 'refine_model.h1.2.bias', 'features.features.layer2.3.bn2.num_batches_tracked', 'features.features.layer3.0.bn3.running_mean', 'features.features.layer2.2.bn2.running_mean', 'features.features.layer3.3.bn2.running_mean', 'features.features.layer1.2.bn1.running_mean', 'features.features.layer3.0.conv3.weight', 'features.features.layer2.1.bn2.running_var', 'rpn_model.loc.head.0.weight', 'rpn_model.loc.head.1.bias', 'features.features.layer2.0.bn1.bias', 'features.features.layer3.3.bn1.running_var', 'features.features.layer3.2.bn2.num_batches_tracked', 'rpn_model.cls.conv_search.1.weight', 'refine_model.v2.2.bias', 'features.features.layer3.4.bn3.bias', 'features.features.layer3.3.conv3.weight', 'features.features.layer3.0.bn1.running_var', 'features.features.layer3.1.bn2.running_mean', 'refine_model.h0.2.bias', 'features.features.layer2.2.bn1.num_batches_tracked', 'features.features.layer1.2.bn2.running_var', 'features.features.layer2.3.bn2.running_var', 'features.features.bn1.running_var', 'rpn_model.cls.head.3.bias', 'rpn_model.loc.conv_kernel.0.weight', 'rpn_model.loc.head.3.bias', 'features.features.layer3.5.bn3.num_batches_tracked', 'features.features.layer3.0.bn1.num_batches_tracked', 'features.features.layer1.2.bn3.running_var', 'features.features.layer2.1.bn3.running_var', 'features.features.layer3.0.conv1.weight', 'features.features.layer1.0.bn2.running_mean', 'rpn_model.loc.head.1.running_var', 'features.features.layer2.1.bn3.bias', 'features.features.layer2.3.bn2.weight', 'features.features.layer2.2.bn3.num_batches_tracked', 'features.features.layer1.0.bn3.weight', 'features.features.layer2.0.bn3.num_batches_tracked', 'features.features.layer2.2.bn2.weight', 'features.features.layer3.0.downsample.1.num_batches_tracked', 'features.features.layer2.3.bn1.num_batches_tracked', 'refine_model.v2.0.bias', 'features.features.layer3.4.bn1.running_var', 'features.features.layer3.3.bn2.bias', 'features.features.layer3.2.conv1.weight', 'features.features.layer3.3.bn1.weight', 'features.features.layer1.2.conv1.weight', 'rpn_model.cls.conv_search.0.weight', 'features.features.layer3.0.bn1.bias', 'features.features.layer1.0.downsample.1.running_var', 'features.features.layer2.1.bn1.num_batches_tracked', 'features.features.layer2.2.conv3.weight', 'features.features.layer3.2.bn1.weight', 'features.features.layer1.2.bn1.bias', 'features.features.layer3.2.conv2.weight', 'features.features.layer3.2.bn3.num_batches_tracked', 'features.features.layer3.4.bn2.num_batches_tracked', 'features.features.layer3.2.bn3.running_var', 'features.features.layer2.3.bn2.running_mean', 'features.features.layer1.0.conv3.weight', 'rpn_model.loc.conv_search.1.num_batches_tracked', 'features.features.layer3.4.bn2.weight', 'rpn_model.cls.conv_kernel.1.running_var', 'features.features.layer2.3.conv3.weight', 'refine_model.v0.0.weight', 'rpn_model.cls.conv_kernel.1.running_mean', 'features.features.layer3.1.bn3.running_mean', 'rpn_model.cls.head.1.num_batches_tracked', 'features.features.layer3.4.conv3.weight', 'refine_model.h2.0.weight', 'features.features.layer2.1.bn1.weight', 'refine_model.h2.2.weight', 'refine_model.deconv.weight', 'refine_model.v1.0.weight', 'features.features.layer3.2.bn2.running_var', 'features.features.layer2.3.bn1.running_mean', 'features.features.layer3.1.bn1.weight', 'features.features.layer1.2.bn3.bias', 'features.features.layer2.0.downsample.1.running_mean', 'features.features.layer3.2.bn1.bias', 'features.features.layer3.2.bn1.num_batches_tracked', 'features.features.layer3.2.bn1.running_var', 'rpn_model.cls.conv_kernel.1.weight', 'features.features.layer1.0.bn3.num_batches_tracked', 'features.features.layer3.4.bn3.running_var', 'features.features.layer2.1.bn3.weight', 'features.features.layer3.3.conv2.weight', 'rpn_model.cls.conv_search.1.running_var', 'refine_model.h1.2.weight', 'rpn_model.loc.head.1.weight', 'refine_model.v0.0.bias', 'rpn_model.cls.conv_kernel.1.bias', 'features.features.layer1.0.downsample.1.weight', 'features.features.layer1.1.conv2.weight', 'features.features.layer3.1.bn2.weight', 'rpn_model.loc.conv_search.1.running_var', 'features.features.layer2.0.bn1.running_var', 'features.features.layer3.4.conv2.weight', 'features.features.layer1.1.bn2.running_var', 'refine_model.h2.0.bias', 'mask_model.mask.conv_search.1.running_mean', 'features.features.layer3.1.bn1.running_var', 'features.features.layer3.1.bn2.num_batches_tracked', 'features.features.layer2.0.bn2.running_mean', 'rpn_model.loc.head.3.weight', 'features.features.layer1.2.bn2.weight', 'rpn_model.loc.conv_search.0.weight', 'features.features.layer2.1.conv2.weight', 'refine_model.deconv.bias', 'features.features.layer1.0.downsample.1.bias', 'features.features.layer1.1.bn2.bias', 'refine_model.v1.0.bias', 'features.features.layer1.1.bn1.weight', 'features.features.layer3.0.bn2.running_var', 'features.features.bn1.bias', 'features.features.layer2.0.downsample.1.running_var', 'features.features.layer2.3.bn3.running_var', 'features.features.layer1.1.bn2.running_mean', 'features.features.layer1.1.bn3.running_var', 'rpn_model.loc.conv_search.1.running_mean', 'features.features.layer3.1.conv1.weight', 'features.features.layer3.2.bn2.running_mean', 'features.downsample.downsample.1.bias', 'features.features.layer3.2.bn3.running_mean', 'mask_model.mask.conv_kernel.0.weight', 'features.features.layer2.1.conv1.weight', 'features.features.layer3.1.bn3.num_batches_tracked', 'features.features.layer1.0.conv2.weight', 'features.features.layer3.0.bn2.bias', 'mask_model.mask.head.0.weight', 'features.features.layer2.0.bn2.num_batches_tracked', 'features.features.layer2.0.bn3.running_var', 'features.features.layer3.0.bn3.weight', 'features.features.layer1.1.bn1.num_batches_tracked', 'features.features.layer3.5.bn2.running_mean', 'features.features.layer2.1.bn2.num_batches_tracked', 'features.features.layer3.3.conv1.weight', 'features.features.layer1.1.bn3.running_mean', 'features.features.layer1.1.bn1.bias', 'features.features.layer2.2.bn2.running_var', 'features.features.layer2.1.bn1.running_var', 'mask_model.mask.conv_search.1.num_batches_tracked', 'features.features.layer3.5.bn2.running_var', 'features.features.layer1.2.bn1.running_var', 'features.features.layer2.0.bn2.running_var', 'rpn_model.loc.conv_kernel.1.bias', 'features.features.layer3.2.bn2.bias', 'rpn_model.cls.conv_search.1.running_mean', 'features.features.layer1.1.conv1.weight', 'features.features.layer1.0.bn2.num_batches_tracked', 'rpn_model.cls.head.1.running_mean', 'features.features.layer2.2.bn3.weight', 'refine_model.post2.weight', 'features.features.layer2.1.bn3.num_batches_tracked', 'features.features.layer3.0.downsample.0.weight', 'features.features.bn1.num_batches_tracked', 'features.features.layer2.0.conv1.weight', 'features.features.layer3.3.bn2.num_batches_tracked', 'features.features.layer3.1.bn3.running_var', 'features.features.layer2.0.conv3.weight', 'features.features.layer1.1.bn2.weight', 'features.features.layer2.3.bn3.num_batches_tracked', 'features.features.layer2.1.conv3.weight', 'refine_model.post0.bias', 'refine_model.v1.2.weight', 'refine_model.post0.weight', 'features.features.layer3.4.bn3.running_mean', 'features.features.layer2.0.bn3.running_mean', 'refine_model.v0.2.bias', 'features.features.layer2.3.bn3.bias', 'features.features.layer2.0.bn3.weight', 'features.features.layer1.1.conv3.weight', 'features.features.layer2.3.conv1.weight', 'refine_model.v2.2.weight', 'features.features.layer3.4.bn3.num_batches_tracked', 'refine_model.h0.0.bias', 'features.features.layer3.4.bn1.weight', 'features.features.layer1.2.bn1.weight', 'features.features.layer1.1.bn3.bias', 'features.features.layer3.1.bn1.num_batches_tracked', 'rpn_model.cls.head.1.running_var', 'refine_model.post1.weight', 'features.features.bn1.weight', 'features.features.layer1.2.bn2.running_mean', 'features.features.layer2.0.downsample.0.weight', 'features.features.layer2.1.bn3.running_mean', 'features.features.layer2.2.bn1.running_mean', 'features.features.layer1.0.bn1.running_var', 'features.features.layer3.1.conv3.weight', 'features.features.layer3.5.bn2.weight', 'features.features.layer3.4.bn2.bias', 'mask_model.mask.conv_kernel.1.bias', 'features.features.layer3.5.conv2.weight', 'features.features.layer1.0.downsample.1.num_batches_tracked', 'features.features.layer1.0.downsample.1.running_mean', 'features.features.layer3.4.bn1.num_batches_tracked', 'features.features.layer1.1.bn1.running_mean', 'refine_model.h1.0.weight', 'features.features.layer2.2.bn3.running_mean', 'features.features.layer2.0.downsample.1.num_batches_tracked', 'features.features.layer3.1.bn3.bias', 'features.features.layer3.3.bn3.weight', 'features.features.layer3.0.bn3.bias', 'features.features.layer3.1.bn2.running_var', 'features.features.layer2.0.conv2.weight', 'features.features.conv1.weight', 'features.features.layer2.3.bn1.weight', 'features.features.layer2.1.bn1.running_mean', 'features.features.layer3.0.conv2.weight', 'features.features.layer3.0.bn2.running_mean', 'features.features.layer2.3.bn2.bias', 'features.features.layer2.1.bn1.bias', 'features.features.layer3.2.conv3.weight', 'features.features.layer1.0.bn3.bias', 'refine_model.h1.0.bias', 'rpn_model.cls.conv_kernel.0.weight', 'mask_model.mask.head.1.running_mean', 'mask_model.mask.conv_kernel.1.weight', 'features.features.layer2.2.bn1.bias', 'features.features.layer1.1.bn2.num_batches_tracked', 'features.features.layer3.5.bn1.running_var', 'refine_model.h2.2.bias', 'features.features.layer1.1.bn1.running_var', 'features.features.layer3.5.bn3.running_mean', 'features.features.layer1.0.bn1.num_batches_tracked', 'features.features.layer1.0.bn2.running_var', 'mask_model.mask.head.1.running_var', 'features.features.layer1.2.bn3.running_mean', 'features.features.layer1.0.bn1.running_mean', 'features.features.layer3.3.bn3.bias', 'features.features.layer3.4.bn2.running_mean', 'rpn_model.cls.conv_kernel.1.num_batches_tracked', 'features.features.layer3.0.bn2.num_batches_tracked', 'rpn_model.cls.conv_search.1.num_batches_tracked', 'mask_model.mask.head.3.weight', 'features.features.layer1.2.bn3.num_batches_tracked', 'features.features.layer3.0.bn1.weight', 'rpn_model.loc.conv_kernel.1.weight', 'refine_model.h0.2.weight', 'features.features.layer1.0.bn3.running_var', 'features.features.layer3.3.bn2.running_var', 'features.features.layer2.3.bn3.weight', 'features.features.layer2.1.bn2.running_mean', 'features.features.layer2.2.conv2.weight', 'features.features.layer2.0.bn1.num_batches_tracked', 'features.features.layer3.4.bn1.running_mean', 'refine_model.h0.0.weight', 'features.features.layer3.1.bn3.weight', 'features.features.layer3.5.bn3.bias', 'features.features.layer2.0.bn2.bias', 'features.features.layer3.3.bn1.running_mean', 'features.features.layer3.0.bn3.running_var', 'features.features.layer3.5.bn2.bias', 'features.features.layer3.5.bn2.num_batches_tracked', 'features.features.layer2.2.bn1.weight', 'features.features.layer3.1.bn2.bias', 'features.features.bn1.running_mean', 'features.features.layer3.0.downsample.1.weight', 'rpn_model.cls.head.0.weight', 'features.features.layer2.1.bn2.weight', 'mask_model.mask.conv_kernel.1.running_mean', 'features.features.layer1.2.bn2.bias', 'features.features.layer3.0.bn2.weight', 'features.features.layer3.4.bn1.bias', 'features.downsample.downsample.1.running_mean', 'features.features.layer1.2.bn1.num_batches_tracked', 'features.features.layer1.1.bn3.num_batches_tracked', 'features.features.layer3.5.conv1.weight', 'features.features.layer1.2.bn2.num_batches_tracked', 'features.features.layer3.3.bn3.running_var', 'features.features.layer3.5.bn1.running_mean', 'features.features.layer1.0.bn3.running_mean', 'features.downsample.downsample.1.num_batches_tracked', 'features.features.layer3.0.bn1.running_mean', 'features.features.layer2.0.bn1.running_mean', 'features.features.layer2.0.bn2.weight', 'rpn_model.loc.conv_search.1.weight', 'features.features.layer1.1.bn3.weight', 'features.features.layer1.2.conv2.weight', 'features.features.layer1.0.bn2.weight', 'mask_model.mask.head.1.bias', 'mask_model.mask.head.3.bias', 'features.features.layer3.0.bn3.num_batches_tracked', 'features.features.layer2.2.bn3.bias', 'mask_model.mask.conv_kernel.1.num_batches_tracked', 'refine_model.v1.2.bias', 'mask_model.mask.conv_search.0.weight', 'features.features.layer3.1.bn1.running_mean', 'features.features.layer1.0.bn1.weight', 'rpn_model.loc.conv_kernel.1.num_batches_tracked', 'features.features.layer2.2.bn2.num_batches_tracked', 'features.downsample.downsample.1.weight', 'features.features.layer1.2.bn3.weight', 'features.features.layer3.4.bn3.weight', 'features.features.layer2.0.downsample.1.weight', 'features.features.layer1.0.conv1.weight', 'features.features.layer3.3.bn1.num_batches_tracked', 'mask_model.mask.conv_search.1.weight', 'features.features.layer3.2.bn2.weight', 'features.features.layer3.5.bn3.running_var', 'features.features.layer2.0.bn1.weight'}
[2020-06-13 15:57:10,238-rk0-load_helper.py# 14] missing keys:356
[2020-06-13 15:57:10,238-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'layer2.0.downsample.1.bias', 'layer3.0.downsample.1.weight', 'layer3.0.bn3.weight', 'layer3.2.bn1.weight', 'layer3.2.bn2.running_var', 'layer2.0.bn1.weight', 'layer2.3.bn3.weight', 'layer3.1.bn3.running_var', 'layer3.0.bn3.running_var', 'layer3.0.conv3.weight', 'layer2.3.bn3.running_var', 'layer1.0.bn3.bias', 'layer2.3.bn3.running_mean', 'layer3.2.bn3.running_var', 'layer2.0.bn3.running_var', 'layer3.2.conv3.weight', 'layer2.1.bn2.running_mean', 'layer3.2.bn3.bias', 'layer1.1.bn2.running_mean', 'layer1.1.bn2.weight', 'layer2.3.conv2.weight', 'layer1.1.bn3.running_var', 'layer2.1.bn3.weight', 'layer1.0.downsample.0.weight', 'layer1.1.conv3.weight', 'layer2.3.conv1.weight', 'layer3.1.bn3.bias', 'layer4.1.conv1.weight', 'layer4.0.downsample.1.running_var', 'layer4.1.bn1.bias', 'layer4.1.bn1.running_var', 'layer4.2.conv2.weight', 'layer4.0.bn1.running_mean', 'layer2.1.conv3.weight', 'layer1.2.bn2.bias', 'layer2.1.bn2.weight', 'layer3.5.bn1.weight', 'layer2.0.downsample.1.running_var', 'layer2.2.conv2.weight', 'layer4.1.bn1.weight', 'layer2.0.bn2.running_mean', 'layer3.1.conv3.weight', 'layer2.3.bn2.weight', 'layer3.1.bn2.bias', 'layer2.2.bn2.running_mean', 'layer3.3.bn1.running_var', 'layer1.2.conv1.weight', 'layer3.0.bn1.bias', 'layer3.3.bn1.bias', 'layer3.4.bn3.bias', 'layer3.0.bn1.weight', 'layer4.2.bn1.weight', 'layer1.0.bn3.running_mean', 'layer2.0.downsample.0.weight', 'layer3.1.bn2.running_var', 'bn1.running_var', 'layer3.5.bn1.bias', 'layer1.0.conv1.weight', 'layer4.0.downsample.1.bias', 'layer3.1.bn3.running_mean', 'layer3.3.conv1.weight', 'layer1.2.conv2.weight', 'layer1.1.bn3.bias', 'layer3.4.bn2.weight', 'layer3.3.bn3.weight', 'layer3.1.bn1.running_var', 'layer3.3.bn3.bias', 'layer1.1.bn3.running_mean', 'layer1.0.bn2.running_mean', 'layer3.4.bn2.running_var', 'layer3.0.downsample.1.running_mean', 'layer1.1.conv1.weight', 'layer1.2.bn3.weight', 'layer4.0.downsample.1.weight', 'layer3.3.conv3.weight', 'layer4.0.bn1.weight', 'layer2.2.bn2.bias', 'layer2.0.conv2.weight', 'layer4.2.bn3.running_mean', 'layer2.2.bn3.bias', 'layer3.2.bn2.running_mean', 'layer2.1.bn2.running_var', 'layer2.2.bn1.running_mean', 'layer3.1.bn1.running_mean', 'layer1.2.bn3.running_mean', 'layer4.2.conv3.weight', 'layer1.0.bn1.bias', 'layer3.4.bn3.weight', 'layer1.2.conv3.weight', 'layer2.0.downsample.1.weight', 'layer4.2.bn3.bias', 'layer2.0.bn3.bias', 'layer1.2.bn1.weight', 'layer3.3.bn2.running_var', 'layer1.0.bn2.running_var', 'layer2.0.bn2.weight', 'layer1.0.bn2.weight', 'layer2.2.bn1.weight', 'layer3.0.bn3.running_mean', 'layer3.2.bn3.running_mean', 'layer2.3.bn3.bias', 'layer3.0.bn2.running_var', 'layer3.5.bn2.running_mean', 'layer2.0.bn2.bias', 'layer4.2.bn1.running_mean', 'layer2.2.bn2.running_var', 'layer3.0.downsample.1.bias', 'conv1.weight', 'layer2.2.bn1.running_var', 'layer1.2.bn2.running_var', 'layer3.1.bn2.running_mean', 'layer3.2.bn1.running_var', 'layer4.0.bn2.running_var', 'layer4.2.bn2.running_mean', 'layer2.1.bn3.bias', 'layer3.4.bn1.bias', 'layer3.5.conv1.weight', 'layer3.2.conv2.weight', 'layer3.5.bn3.running_mean', 'layer4.0.conv2.weight', 'layer1.1.bn1.running_mean', 'layer3.5.conv2.weight', 'layer4.2.bn3.running_var', 'layer2.1.conv1.weight', 'layer4.2.bn3.weight', 'layer4.0.conv1.weight', 'bn1.bias', 'layer3.5.bn3.running_var', 'layer1.0.conv3.weight', 'layer1.2.bn2.running_mean', 'layer3.4.bn2.bias', 'layer2.0.bn2.running_var', 'layer2.2.conv3.weight', 'layer2.3.bn1.bias', 'layer3.0.downsample.0.weight', 'layer3.1.bn3.weight', 'layer2.2.bn3.weight', 'layer2.0.conv1.weight', 'layer3.1.bn1.weight', 'layer1.2.bn1.running_var', 'layer3.0.downsample.1.running_var', 'layer4.1.bn2.running_mean', 'layer3.2.bn2.bias', 'layer3.5.bn3.bias', 'layer2.1.bn1.weight', 'layer1.1.bn1.running_var', 'layer2.1.bn1.bias', 'layer1.1.bn2.running_var', 'layer3.5.bn2.weight', 'layer1.2.bn1.bias', 'layer3.5.bn2.running_var', 'layer3.2.bn3.weight', 'layer4.0.downsample.0.weight', 'layer2.1.bn1.running_mean', 'layer2.2.bn2.weight', 'layer4.2.bn2.bias', 'layer2.3.bn2.running_var', 'layer3.3.bn2.bias', 'layer1.0.conv2.weight', 'layer4.0.bn2.bias', 'layer3.1.bn1.bias', 'layer4.2.bn2.weight', 'layer3.0.bn2.running_mean', 'layer3.3.bn2.running_mean', 'layer2.3.bn1.running_mean', 'layer2.1.conv2.weight', 'layer3.3.bn3.running_var', 'layer4.1.bn3.bias', 'layer2.3.conv3.weight', 'layer4.2.conv1.weight', 'bn1.running_mean', 'layer1.2.bn3.bias', 'layer2.0.downsample.1.running_mean', 'layer3.2.bn1.bias', 'layer1.0.bn1.running_mean', 'layer3.0.bn1.running_var', 'layer1.0.bn3.weight', 'layer4.1.conv2.weight', 'layer1.0.downsample.1.weight', 'layer4.0.bn3.running_mean', 'layer1.1.bn1.bias', 'layer2.0.conv3.weight', 'layer3.1.bn2.weight', 'layer2.3.bn2.bias', 'layer3.3.bn1.running_mean', 'layer3.3.bn2.weight', 'layer1.1.bn1.weight', 'layer3.4.bn1.running_var', 'layer2.3.bn1.running_var', 'layer2.2.bn1.bias', 'layer2.2.bn3.running_mean', 'layer3.5.conv3.weight', 'layer2.3.bn1.weight', 'layer3.4.conv1.weight', 'layer3.3.bn3.running_mean', 'layer4.0.bn1.running_var', 'layer3.2.bn1.running_mean', 'layer2.0.bn1.running_var', 'layer3.4.conv3.weight', 'layer4.0.bn3.weight', 'layer3.5.bn1.running_mean', 'layer3.2.bn2.weight', 'layer3.0.bn1.running_mean', 'layer1.0.downsample.1.running_mean', 'layer3.5.bn3.weight', 'layer3.5.bn1.running_var', 'layer3.1.conv2.weight', 'layer2.1.bn3.running_var', 'layer1.2.bn1.running_mean', 'layer3.0.bn3.bias', 'layer3.3.conv2.weight', 'layer3.4.bn1.running_mean', 'layer4.1.bn3.weight', 'layer4.0.bn1.bias', 'layer3.4.bn3.running_var', 'layer1.0.bn2.bias', 'layer3.0.conv1.weight', 'layer4.0.conv3.weight', 'layer4.2.bn1.bias', 'bn1.weight', 'layer4.2.bn1.running_var', 'layer4.2.bn2.running_var', 'layer2.1.bn3.running_mean', 'layer2.2.bn3.running_var', 'layer4.1.bn1.running_mean', 'layer3.4.bn1.weight', 'layer4.0.bn3.bias', 'layer4.0.bn2.weight', 'layer1.0.bn3.running_var', 'layer1.2.bn3.running_var', 'layer3.4.bn3.running_mean', 'layer3.5.bn2.bias', 'layer1.0.downsample.1.bias', 'layer2.0.bn1.bias', 'layer3.2.conv1.weight', 'layer3.4.bn2.running_mean', 'layer4.0.bn2.running_mean', 'layer1.1.bn3.weight', 'layer4.1.conv3.weight', 'layer1.0.bn1.weight', 'layer4.1.bn2.running_var', 'layer3.0.bn2.weight', 'layer2.0.bn3.running_mean', 'layer2.0.bn1.running_mean', 'layer4.1.bn3.running_mean', 'layer4.0.bn3.running_var', 'layer3.0.conv2.weight', 'layer4.0.downsample.1.running_mean', 'layer4.1.bn3.running_var', 'layer3.4.conv2.weight', 'layer2.0.bn3.weight', 'layer2.1.bn1.running_var', 'layer3.3.bn1.weight', 'layer1.1.conv2.weight', 'layer2.1.bn2.bias', 'layer4.1.bn2.bias', 'layer1.0.bn1.running_var', 'layer2.2.conv1.weight', 'layer1.0.downsample.1.running_var', 'layer1.1.bn2.bias', 'layer4.1.bn2.weight', 'layer3.1.conv1.weight', 'layer1.2.bn2.weight', 'layer3.0.bn2.bias', 'layer2.3.bn2.running_mean'}
[2020-06-13 15:57:10,238-rk0-load_helper.py# 17] unused checkpoint keys:265
[2020-06-13 15:57:10,238-rk0-load_helper.py# 18] used keys:0
[2020-06-13 15:57:10,238-rk0-load_helper.py# 47] [Warning]: using pretrain as features. Adding "features." as prefix
[2020-06-13 15:57:10,239-rk0-load_helper.py# 13] [Warning] missing keys: {'features.features.layer1.0.bn2.bias', 'features.features.layer3.3.bn2.weight', 'rpn_model.loc.head.1.num_batches_tracked', 'features.features.layer3.0.downsample.1.running_mean', 'rpn_model.loc.conv_kernel.1.running_mean', 'features.features.layer3.3.bn3.num_batches_tracked', 'mask_model.mask.conv_search.1.running_var', 'features.features.layer3.5.bn3.weight', 'features.features.layer3.4.conv1.weight', 'refine_model.post1.bias', 'features.features.layer2.1.bn2.bias', 'mask_model.mask.conv_search.1.bias', 'features.downsample.downsample.0.weight', 'rpn_model.loc.conv_kernel.1.running_var', 'features.features.layer2.3.conv2.weight', 'features.features.layer2.2.bn1.running_var', 'features.features.layer2.3.bn1.bias', 'features.features.layer3.1.conv2.weight', 'features.features.layer3.2.bn1.running_mean', 'features.features.layer3.2.bn3.bias', 'rpn_model.loc.conv_search.1.bias', 'features.features.layer1.0.bn1.bias', 'features.features.layer2.3.bn1.running_var', 'features.features.layer2.0.bn3.bias', 'rpn_model.cls.head.3.weight', 'features.features.layer3.5.bn1.num_batches_tracked', 'features.features.layer3.0.downsample.1.running_var', 'features.features.layer2.3.bn3.running_mean', 'refine_model.v2.0.weight', 'features.features.layer3.5.bn1.bias', 'refine_model.post2.bias', 'features.downsample.downsample.1.running_var', 'features.features.layer3.3.bn3.running_mean', 'mask_model.mask.head.1.num_batches_tracked', 'features.features.layer3.5.bn1.weight', 'features.features.layer1.0.downsample.0.weight', 'features.features.layer3.0.downsample.1.bias', 'rpn_model.cls.conv_search.1.bias', 'refine_model.v0.2.weight', 'features.features.layer3.5.conv3.weight', 'mask_model.mask.head.1.weight', 'features.features.layer2.2.conv1.weight', 'features.features.layer2.2.bn3.running_var', 'features.features.layer3.1.bn1.bias', 'rpn_model.cls.head.1.weight', 'features.features.layer3.2.bn3.weight', 'rpn_model.loc.head.1.running_mean', 'features.features.layer1.2.conv3.weight', 'mask_model.mask.conv_kernel.1.running_var', 'features.features.layer3.4.bn2.running_var', 'features.features.layer2.0.downsample.1.bias', 'features.features.layer2.2.bn2.bias', 'features.features.layer3.3.bn1.bias', 'rpn_model.cls.head.1.bias', 'refine_model.h1.2.bias', 'features.features.layer2.3.bn2.num_batches_tracked', 'features.features.layer3.0.bn3.running_mean', 'features.features.layer2.2.bn2.running_mean', 'features.features.layer3.3.bn2.running_mean', 'features.features.layer1.2.bn1.running_mean', 'features.features.layer3.0.conv3.weight', 'features.features.layer2.1.bn2.running_var', 'rpn_model.loc.head.0.weight', 'rpn_model.loc.head.1.bias', 'features.features.layer2.0.bn1.bias', 'features.features.layer3.3.bn1.running_var', 'features.features.layer3.2.bn2.num_batches_tracked', 'rpn_model.cls.conv_search.1.weight', 'refine_model.v2.2.bias', 'features.features.layer3.4.bn3.bias', 'features.features.layer3.3.conv3.weight', 'features.features.layer3.0.bn1.running_var', 'features.features.layer3.1.bn2.running_mean', 'refine_model.h0.2.bias', 'features.features.layer2.2.bn1.num_batches_tracked', 'features.features.layer1.2.bn2.running_var', 'features.features.layer2.3.bn2.running_var', 'features.features.bn1.running_var', 'rpn_model.cls.head.3.bias', 'rpn_model.loc.conv_kernel.0.weight', 'rpn_model.loc.head.3.bias', 'features.features.layer3.5.bn3.num_batches_tracked', 'features.features.layer3.0.bn1.num_batches_tracked', 'features.features.layer1.2.bn3.running_var', 'features.features.layer2.1.bn3.running_var', 'features.features.layer3.0.conv1.weight', 'features.features.layer1.0.bn2.running_mean', 'rpn_model.loc.head.1.running_var', 'features.features.layer2.1.bn3.bias', 'features.features.layer2.3.bn2.weight', 'features.features.layer2.2.bn3.num_batches_tracked', 'features.features.layer1.0.bn3.weight', 'features.features.layer2.0.bn3.num_batches_tracked', 'features.features.layer2.2.bn2.weight', 'features.features.layer3.0.downsample.1.num_batches_tracked', 'features.features.layer2.3.bn1.num_batches_tracked', 'refine_model.v2.0.bias', 'features.features.layer3.4.bn1.running_var', 'features.features.layer3.3.bn2.bias', 'features.features.layer3.2.conv1.weight', 'features.features.layer3.3.bn1.weight', 'features.features.layer1.2.conv1.weight', 'rpn_model.cls.conv_search.0.weight', 'features.features.layer3.0.bn1.bias', 'features.features.layer1.0.downsample.1.running_var', 'features.features.layer2.1.bn1.num_batches_tracked', 'features.features.layer2.2.conv3.weight', 'features.features.layer3.2.bn1.weight', 'features.features.layer1.2.bn1.bias', 'features.features.layer3.2.conv2.weight', 'features.features.layer3.2.bn3.num_batches_tracked', 'features.features.layer3.4.bn2.num_batches_tracked', 'features.features.layer3.2.bn3.running_var', 'features.features.layer2.3.bn2.running_mean', 'features.features.layer1.0.conv3.weight', 'rpn_model.loc.conv_search.1.num_batches_tracked', 'features.features.layer3.4.bn2.weight', 'rpn_model.cls.conv_kernel.1.running_var', 'features.features.layer2.3.conv3.weight', 'refine_model.v0.0.weight', 'rpn_model.cls.conv_kernel.1.running_mean', 'features.features.layer3.1.bn3.running_mean', 'rpn_model.cls.head.1.num_batches_tracked', 'features.features.layer3.4.conv3.weight', 'refine_model.h2.0.weight', 'features.features.layer2.1.bn1.weight', 'refine_model.h2.2.weight', 'refine_model.deconv.weight', 'refine_model.v1.0.weight', 'features.features.layer3.2.bn2.running_var', 'features.features.layer2.3.bn1.running_mean', 'features.features.layer3.1.bn1.weight', 'features.features.layer1.2.bn3.bias', 'features.features.layer2.0.downsample.1.running_mean', 'features.features.layer3.2.bn1.bias', 'features.features.layer3.2.bn1.num_batches_tracked', 'features.features.layer3.2.bn1.running_var', 'rpn_model.cls.conv_kernel.1.weight', 'features.features.layer1.0.bn3.num_batches_tracked', 'features.features.layer3.4.bn3.running_var', 'features.features.layer2.1.bn3.weight', 'features.features.layer3.3.conv2.weight', 'rpn_model.cls.conv_search.1.running_var', 'refine_model.h1.2.weight', 'rpn_model.loc.head.1.weight', 'refine_model.v0.0.bias', 'rpn_model.cls.conv_kernel.1.bias', 'features.features.layer1.0.downsample.1.weight', 'features.features.layer1.1.conv2.weight', 'features.features.layer3.1.bn2.weight', 'rpn_model.loc.conv_search.1.running_var', 'features.features.layer2.0.bn1.running_var', 'features.features.layer3.4.conv2.weight', 'features.features.layer1.1.bn2.running_var', 'refine_model.h2.0.bias', 'mask_model.mask.conv_search.1.running_mean', 'features.features.layer3.1.bn1.running_var', 'features.features.layer3.1.bn2.num_batches_tracked', 'features.features.layer2.0.bn2.running_mean', 'rpn_model.loc.head.3.weight', 'features.features.layer1.2.bn2.weight', 'rpn_model.loc.conv_search.0.weight', 'features.features.layer2.1.conv2.weight', 'refine_model.deconv.bias', 'features.features.layer1.0.downsample.1.bias', 'features.features.layer1.1.bn2.bias', 'refine_model.v1.0.bias', 'features.features.layer1.1.bn1.weight', 'features.features.layer3.0.bn2.running_var', 'features.features.bn1.bias', 'features.features.layer2.0.downsample.1.running_var', 'features.features.layer2.3.bn3.running_var', 'features.features.layer1.1.bn2.running_mean', 'features.features.layer1.1.bn3.running_var', 'rpn_model.loc.conv_search.1.running_mean', 'features.features.layer3.1.conv1.weight', 'features.features.layer3.2.bn2.running_mean', 'features.downsample.downsample.1.bias', 'features.features.layer3.2.bn3.running_mean', 'mask_model.mask.conv_kernel.0.weight', 'features.features.layer2.1.conv1.weight', 'features.features.layer3.1.bn3.num_batches_tracked', 'features.features.layer1.0.conv2.weight', 'features.features.layer3.0.bn2.bias', 'mask_model.mask.head.0.weight', 'features.features.layer2.0.bn2.num_batches_tracked', 'features.features.layer2.0.bn3.running_var', 'features.features.layer3.0.bn3.weight', 'features.features.layer1.1.bn1.num_batches_tracked', 'features.features.layer3.5.bn2.running_mean', 'features.features.layer2.1.bn2.num_batches_tracked', 'features.features.layer3.3.conv1.weight', 'features.features.layer1.1.bn3.running_mean', 'features.features.layer1.1.bn1.bias', 'features.features.layer2.2.bn2.running_var', 'features.features.layer2.1.bn1.running_var', 'mask_model.mask.conv_search.1.num_batches_tracked', 'features.features.layer3.5.bn2.running_var', 'features.features.layer1.2.bn1.running_var', 'features.features.layer2.0.bn2.running_var', 'rpn_model.loc.conv_kernel.1.bias', 'features.features.layer3.2.bn2.bias', 'rpn_model.cls.conv_search.1.running_mean', 'features.features.layer1.1.conv1.weight', 'features.features.layer1.0.bn2.num_batches_tracked', 'rpn_model.cls.head.1.running_mean', 'features.features.layer2.2.bn3.weight', 'refine_model.post2.weight', 'features.features.layer2.1.bn3.num_batches_tracked', 'features.features.layer3.0.downsample.0.weight', 'features.features.bn1.num_batches_tracked', 'features.features.layer2.0.conv1.weight', 'features.features.layer3.3.bn2.num_batches_tracked', 'features.features.layer3.1.bn3.running_var', 'features.features.layer2.0.conv3.weight', 'features.features.layer1.1.bn2.weight', 'features.features.layer2.3.bn3.num_batches_tracked', 'features.features.layer2.1.conv3.weight', 'refine_model.post0.bias', 'refine_model.v1.2.weight', 'refine_model.post0.weight', 'features.features.layer3.4.bn3.running_mean', 'features.features.layer2.0.bn3.running_mean', 'refine_model.v0.2.bias', 'features.features.layer2.3.bn3.bias', 'features.features.layer2.0.bn3.weight', 'features.features.layer1.1.conv3.weight', 'features.features.layer2.3.conv1.weight', 'refine_model.v2.2.weight', 'features.features.layer3.4.bn3.num_batches_tracked', 'refine_model.h0.0.bias', 'features.features.layer3.4.bn1.weight', 'features.features.layer1.2.bn1.weight', 'features.features.layer1.1.bn3.bias', 'features.features.layer3.1.bn1.num_batches_tracked', 'rpn_model.cls.head.1.running_var', 'refine_model.post1.weight', 'features.features.bn1.weight', 'features.features.layer1.2.bn2.running_mean', 'features.features.layer2.0.downsample.0.weight', 'features.features.layer2.1.bn3.running_mean', 'features.features.layer2.2.bn1.running_mean', 'features.features.layer1.0.bn1.running_var', 'features.features.layer3.1.conv3.weight', 'features.features.layer3.5.bn2.weight', 'features.features.layer3.4.bn2.bias', 'mask_model.mask.conv_kernel.1.bias', 'features.features.layer3.5.conv2.weight', 'features.features.layer1.0.downsample.1.num_batches_tracked', 'features.features.layer1.0.downsample.1.running_mean', 'features.features.layer3.4.bn1.num_batches_tracked', 'features.features.layer1.1.bn1.running_mean', 'refine_model.h1.0.weight', 'features.features.layer2.2.bn3.running_mean', 'features.features.layer2.0.downsample.1.num_batches_tracked', 'features.features.layer3.1.bn3.bias', 'features.features.layer3.3.bn3.weight', 'features.features.layer3.0.bn3.bias', 'features.features.layer3.1.bn2.running_var', 'features.features.layer2.0.conv2.weight', 'features.features.conv1.weight', 'features.features.layer2.3.bn1.weight', 'features.features.layer2.1.bn1.running_mean', 'features.features.layer3.0.conv2.weight', 'features.features.layer3.0.bn2.running_mean', 'features.features.layer2.3.bn2.bias', 'features.features.layer2.1.bn1.bias', 'features.features.layer3.2.conv3.weight', 'features.features.layer1.0.bn3.bias', 'refine_model.h1.0.bias', 'rpn_model.cls.conv_kernel.0.weight', 'mask_model.mask.head.1.running_mean', 'mask_model.mask.conv_kernel.1.weight', 'features.features.layer2.2.bn1.bias', 'features.features.layer1.1.bn2.num_batches_tracked', 'features.features.layer3.5.bn1.running_var', 'refine_model.h2.2.bias', 'features.features.layer1.1.bn1.running_var', 'features.features.layer3.5.bn3.running_mean', 'features.features.layer1.0.bn1.num_batches_tracked', 'features.features.layer1.0.bn2.running_var', 'mask_model.mask.head.1.running_var', 'features.features.layer1.2.bn3.running_mean', 'features.features.layer1.0.bn1.running_mean', 'features.features.layer3.3.bn3.bias', 'features.features.layer3.4.bn2.running_mean', 'rpn_model.cls.conv_kernel.1.num_batches_tracked', 'features.features.layer3.0.bn2.num_batches_tracked', 'rpn_model.cls.conv_search.1.num_batches_tracked', 'mask_model.mask.head.3.weight', 'features.features.layer1.2.bn3.num_batches_tracked', 'features.features.layer3.0.bn1.weight', 'rpn_model.loc.conv_kernel.1.weight', 'refine_model.h0.2.weight', 'features.features.layer1.0.bn3.running_var', 'features.features.layer3.3.bn2.running_var', 'features.features.layer2.3.bn3.weight', 'features.features.layer2.1.bn2.running_mean', 'features.features.layer2.2.conv2.weight', 'features.features.layer2.0.bn1.num_batches_tracked', 'features.features.layer3.4.bn1.running_mean', 'refine_model.h0.0.weight', 'features.features.layer3.1.bn3.weight', 'features.features.layer3.5.bn3.bias', 'features.features.layer2.0.bn2.bias', 'features.features.layer3.3.bn1.running_mean', 'features.features.layer3.0.bn3.running_var', 'features.features.layer3.5.bn2.bias', 'features.features.layer3.5.bn2.num_batches_tracked', 'features.features.layer2.2.bn1.weight', 'features.features.layer3.1.bn2.bias', 'features.features.bn1.running_mean', 'features.features.layer3.0.downsample.1.weight', 'rpn_model.cls.head.0.weight', 'features.features.layer2.1.bn2.weight', 'mask_model.mask.conv_kernel.1.running_mean', 'features.features.layer1.2.bn2.bias', 'features.features.layer3.0.bn2.weight', 'features.features.layer3.4.bn1.bias', 'features.downsample.downsample.1.running_mean', 'features.features.layer1.2.bn1.num_batches_tracked', 'features.features.layer1.1.bn3.num_batches_tracked', 'features.features.layer3.5.conv1.weight', 'features.features.layer1.2.bn2.num_batches_tracked', 'features.features.layer3.3.bn3.running_var', 'features.features.layer3.5.bn1.running_mean', 'features.features.layer1.0.bn3.running_mean', 'features.downsample.downsample.1.num_batches_tracked', 'features.features.layer3.0.bn1.running_mean', 'features.features.layer2.0.bn1.running_mean', 'features.features.layer2.0.bn2.weight', 'rpn_model.loc.conv_search.1.weight', 'features.features.layer1.1.bn3.weight', 'features.features.layer1.2.conv2.weight', 'features.features.layer1.0.bn2.weight', 'mask_model.mask.head.1.bias', 'mask_model.mask.head.3.bias', 'features.features.layer3.0.bn3.num_batches_tracked', 'features.features.layer2.2.bn3.bias', 'mask_model.mask.conv_kernel.1.num_batches_tracked', 'refine_model.v1.2.bias', 'mask_model.mask.conv_search.0.weight', 'features.features.layer3.1.bn1.running_mean', 'features.features.layer1.0.bn1.weight', 'rpn_model.loc.conv_kernel.1.num_batches_tracked', 'features.features.layer2.2.bn2.num_batches_tracked', 'features.downsample.downsample.1.weight', 'features.features.layer1.2.bn3.weight', 'features.features.layer3.4.bn3.weight', 'features.features.layer2.0.downsample.1.weight', 'features.features.layer1.0.conv1.weight', 'features.features.layer3.3.bn1.num_batches_tracked', 'mask_model.mask.conv_search.1.weight', 'features.features.layer3.2.bn2.weight', 'features.features.layer3.5.bn3.running_var', 'features.features.layer2.0.bn1.weight'}
[2020-06-13 15:57:10,239-rk0-load_helper.py# 14] missing keys:356
[2020-06-13 15:57:10,239-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'features.layer2.0.bn2.running_mean', 'features.layer3.4.bn3.running_var', 'features.layer2.2.bn2.running_var', 'features.layer3.1.bn3.bias', 'features.layer3.0.bn3.weight', 'features.layer1.2.bn3.weight', 'features.layer2.0.bn2.running_var', 'features.layer3.2.bn3.running_mean', 'features.layer4.2.bn3.running_mean', 'features.layer3.0.bn1.bias', 'features.layer4.1.bn2.bias', 'features.layer4.2.bn2.running_mean', 'features.layer2.0.conv1.weight', 'features.layer1.2.bn1.running_var', 'features.layer2.0.bn1.weight', 'features.layer2.1.conv3.weight', 'features.layer1.2.bn2.bias', 'features.layer2.1.bn3.running_var', 'features.layer2.0.downsample.1.weight', 'features.layer1.2.bn2.running_var', 'features.layer3.2.bn3.weight', 'features.layer3.5.bn3.weight', 'features.layer3.5.bn3.running_var', 'features.layer1.0.downsample.1.running_var', 'features.layer2.2.bn1.bias', 'features.layer3.1.conv3.weight', 'features.layer4.2.conv1.weight', 'features.layer3.0.conv3.weight', 'features.layer2.0.conv2.weight', 'features.layer2.0.bn3.weight', 'features.layer1.1.conv2.weight', 'features.layer3.3.bn1.running_var', 'features.layer3.3.bn3.running_mean', 'features.layer3.3.bn1.running_mean', 'features.layer4.2.bn3.bias', 'features.layer4.2.bn2.weight', 'features.layer4.2.bn3.weight', 'features.layer3.0.downsample.0.weight', 'features.layer2.1.bn1.running_var', 'features.layer3.4.bn2.weight', 'features.layer3.4.conv3.weight', 'features.layer4.0.conv2.weight', 'features.layer4.0.downsample.1.bias', 'features.layer2.1.bn1.running_mean', 'features.layer4.2.bn1.weight', 'features.layer2.2.bn1.weight', 'features.conv1.weight', 'features.layer4.0.conv1.weight', 'features.layer4.1.bn1.bias', 'features.layer4.2.conv3.weight', 'features.layer4.2.bn3.running_var', 'features.layer3.0.conv1.weight', 'features.layer3.5.bn2.weight', 'features.layer2.0.downsample.1.running_mean', 'features.layer1.1.bn1.running_mean', 'features.layer3.0.bn1.running_mean', 'features.layer3.3.bn3.running_var', 'features.layer1.2.bn2.running_mean', 'features.layer3.5.conv3.weight', 'features.layer1.1.bn2.running_mean', 'features.layer4.1.bn1.weight', 'features.layer4.0.bn2.weight', 'features.layer1.0.bn1.weight', 'features.layer1.1.bn3.weight', 'features.layer3.0.bn3.running_var', 'features.layer1.0.bn1.running_var', 'features.layer1.2.bn1.running_mean', 'features.layer4.0.downsample.1.weight', 'features.layer2.3.bn2.running_var', 'features.layer4.2.bn1.running_mean', 'features.layer2.2.conv1.weight', 'features.layer2.2.bn3.running_var', 'features.layer3.1.bn3.weight', 'features.layer3.0.downsample.1.bias', 'features.layer2.0.downsample.1.running_var', 'features.layer3.1.bn1.running_mean', 'features.layer2.1.conv2.weight', 'features.layer1.1.bn2.weight', 'features.layer3.5.conv2.weight', 'features.layer4.1.bn3.weight', 'features.layer4.1.bn1.running_mean', 'features.layer4.1.bn3.bias', 'features.layer3.5.bn1.running_var', 'features.layer3.0.bn2.running_mean', 'features.layer4.0.bn1.running_var', 'features.layer1.0.bn3.running_mean', 'features.layer2.1.bn3.running_mean', 'features.layer2.2.conv2.weight', 'features.layer3.2.bn1.running_var', 'features.bn1.running_var', 'features.layer4.2.conv2.weight', 'features.layer3.0.bn2.running_var', 'features.layer3.4.bn1.weight', 'features.bn1.running_mean', 'features.layer1.0.bn2.running_var', 'features.layer1.1.conv3.weight', 'features.layer3.2.bn3.running_var', 'features.layer3.4.bn2.running_mean', 'features.layer3.3.conv1.weight', 'features.layer1.2.conv1.weight', 'features.layer3.2.bn1.running_mean', 'features.layer3.5.bn2.running_mean', 'features.layer3.4.bn3.bias', 'features.layer3.3.bn3.weight', 'features.layer3.4.bn3.running_mean', 'features.layer1.0.downsample.0.weight', 'features.layer3.5.bn1.weight', 'features.layer1.0.downsample.1.bias', 'features.layer4.0.bn3.running_mean', 'features.layer1.0.bn1.running_mean', 'features.layer2.3.conv2.weight', 'features.layer3.5.bn3.bias', 'features.layer1.1.bn1.running_var', 'features.layer2.1.bn2.running_var', 'features.layer4.0.bn3.weight', 'features.layer1.2.bn1.bias', 'features.layer2.3.bn1.running_mean', 'features.layer1.0.conv1.weight', 'features.layer1.0.downsample.1.weight', 'features.layer2.0.bn3.running_mean', 'features.layer4.0.downsample.0.weight', 'features.layer4.2.bn1.running_var', 'features.layer2.1.bn2.running_mean', 'features.layer2.2.bn3.weight', 'features.layer3.2.bn1.bias', 'features.layer2.0.conv3.weight', 'features.layer2.3.bn1.bias', 'features.layer3.3.bn2.running_var', 'features.layer2.0.bn2.bias', 'features.layer2.3.bn3.bias', 'features.layer2.3.bn3.running_var', 'features.layer2.1.bn2.bias', 'features.layer3.1.conv2.weight', 'features.layer3.4.conv1.weight', 'features.layer4.1.bn1.running_var', 'features.layer1.2.bn1.weight', 'features.layer2.2.bn2.running_mean', 'features.layer4.1.conv2.weight', 'features.layer4.1.bn2.running_mean', 'features.layer1.0.bn2.weight', 'features.layer3.1.bn3.running_var', 'features.bn1.weight', 'features.layer3.4.bn3.weight', 'features.layer2.3.bn1.weight', 'features.layer3.0.bn3.bias', 'features.layer2.1.bn2.weight', 'features.layer3.3.conv2.weight', 'features.layer3.0.bn2.weight', 'features.layer4.1.bn2.weight', 'features.layer3.2.bn2.running_mean', 'features.layer3.2.bn2.running_var', 'features.layer4.2.bn2.bias', 'features.layer1.2.conv2.weight', 'features.layer2.1.conv1.weight', 'features.layer1.2.bn2.weight', 'features.layer1.0.bn3.running_var', 'features.layer2.2.bn2.bias', 'features.layer3.0.bn2.bias', 'features.layer3.0.downsample.1.running_mean', 'features.layer3.3.conv3.weight', 'features.layer1.2.conv3.weight', 'features.layer3.4.conv2.weight', 'features.layer2.2.bn3.running_mean', 'features.layer4.0.conv3.weight', 'features.layer4.1.conv3.weight', 'features.layer3.0.bn1.weight', 'features.layer3.1.conv1.weight', 'features.layer1.0.bn1.bias', 'features.layer2.0.bn1.running_var', 'features.layer2.1.bn3.bias', 'features.layer3.1.bn1.weight', 'features.layer2.3.bn2.running_mean', 'features.layer4.1.bn2.running_var', 'features.layer4.0.bn3.running_var', 'features.layer1.0.downsample.1.running_mean', 'features.layer4.2.bn1.bias', 'features.layer4.1.conv1.weight', 'features.layer3.1.bn1.running_var', 'features.layer2.0.bn1.bias', 'features.layer3.1.bn2.running_var', 'features.layer3.0.downsample.1.running_var', 'features.layer1.1.bn1.weight', 'features.layer3.4.bn1.running_var', 'features.layer3.2.bn3.bias', 'features.layer3.1.bn2.weight', 'features.layer4.1.bn3.running_mean', 'features.layer2.2.bn3.bias', 'features.layer2.1.bn1.weight', 'features.layer3.5.bn3.running_mean', 'features.layer3.3.bn3.bias', 'features.layer1.2.bn3.running_mean', 'features.layer3.0.downsample.1.weight', 'features.layer3.4.bn1.running_mean', 'features.layer4.0.downsample.1.running_mean', 'features.layer3.3.bn2.running_mean', 'features.layer4.0.bn1.running_mean', 'features.layer2.0.downsample.0.weight', 'features.bn1.bias', 'features.layer4.0.bn3.bias', 'features.layer3.5.bn2.bias', 'features.layer3.4.bn2.running_var', 'features.layer2.3.conv1.weight', 'features.layer1.1.bn1.bias', 'features.layer4.2.bn2.running_var', 'features.layer2.2.bn1.running_var', 'features.layer3.2.conv2.weight', 'features.layer3.4.bn2.bias', 'features.layer2.3.bn3.weight', 'features.layer3.5.conv1.weight', 'features.layer4.1.bn3.running_var', 'features.layer2.3.bn1.running_var', 'features.layer1.2.bn3.running_var', 'features.layer3.3.bn2.weight', 'features.layer3.2.conv1.weight', 'features.layer3.3.bn1.weight', 'features.layer3.1.bn3.running_mean', 'features.layer3.2.bn2.weight', 'features.layer3.1.bn2.bias', 'features.layer2.0.bn2.weight', 'features.layer4.0.bn1.weight', 'features.layer2.0.bn3.bias', 'features.layer2.2.bn1.running_mean', 'features.layer3.1.bn2.running_mean', 'features.layer3.5.bn1.bias', 'features.layer1.0.bn2.running_mean', 'features.layer3.3.bn1.bias', 'features.layer2.2.bn2.weight', 'features.layer1.0.bn2.bias', 'features.layer2.1.bn1.bias', 'features.layer1.0.bn3.bias', 'features.layer2.1.bn3.weight', 'features.layer2.3.bn3.running_mean', 'features.layer2.3.conv3.weight', 'features.layer3.2.conv3.weight', 'features.layer1.1.bn3.running_var', 'features.layer1.0.conv3.weight', 'features.layer1.0.bn3.weight', 'features.layer1.1.bn2.running_var', 'features.layer2.2.conv3.weight', 'features.layer3.2.bn1.weight', 'features.layer3.3.bn2.bias', 'features.layer3.5.bn2.running_var', 'features.layer3.1.bn1.bias', 'features.layer3.0.conv2.weight', 'features.layer2.0.bn1.running_mean', 'features.layer1.1.conv1.weight', 'features.layer1.1.bn3.bias', 'features.layer2.3.bn2.bias', 'features.layer3.0.bn1.running_var', 'features.layer2.0.bn3.running_var', 'features.layer4.0.bn2.running_mean', 'features.layer4.0.bn2.running_var', 'features.layer1.1.bn2.bias', 'features.layer3.2.bn2.bias', 'features.layer1.1.bn3.running_mean', 'features.layer1.0.conv2.weight', 'features.layer4.0.downsample.1.running_var', 'features.layer2.0.downsample.1.bias', 'features.layer1.2.bn3.bias', 'features.layer4.0.bn2.bias', 'features.layer2.3.bn2.weight', 'features.layer3.4.bn1.bias', 'features.layer3.5.bn1.running_mean', 'features.layer4.0.bn1.bias', 'features.layer3.0.bn3.running_mean'}
[2020-06-13 15:57:10,239-rk0-load_helper.py# 17] unused checkpoint keys:265
[2020-06-13 15:57:10,239-rk0-load_helper.py# 18] used keys:0
[2020-06-13 16:00:37,978-rk0-train_siammask_refine.py#123] 
PyTorch version: 1.0.0
Is debug build: No
CUDA used to build PyTorch: 10.0.130

OS: Ubuntu 18.04.4 LTS
GCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CMake version: version 3.10.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: Could not collect
GPU models and configuration: GPU 0: GeForce RTX 2060
Nvidia driver version: 435.21
cuDNN version: Probably one of the following:
/usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.5
/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a

Versions of relevant libraries:
[pip3] torch (1.0.0)
[conda] torch                     1.0.0                    pypi_0    pypi
[conda] torchvision               0.2.1                    pypi_0    pypi
        OpenCV (3.4.3)
[2020-06-13 16:00:37,978-rk0-train_siammask_refine.py#124] Namespace(arch='', batch=64, clip=10.0, config='config.json', epochs=20, log='log.txt', log_dir='board', lr=0.001, momentum=0.9, pretrained='', print_freq=10, resume='', save_dir='snapshot', start_epoch=0, weight_decay=0.0001, workers=20)
[2020-06-13 16:00:37,979-rk0-train_siammask_refine.py#127] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8,
        "out_size": 127,
        "seg_thr": 0.35,
        "penalty_k": 0.04,
        "window_influence": 0.4,
        "lr": 1.0
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 0.0025
    },
    "loss": {
        "weight": [
            0,
            0,
            36
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "ytb_vos": {
                "root": "../../data/ytb_vos/crop511",
                "anno": "../../data/ytb_vos/train.json",
                "num_use": 100000,
                "frame_range": 20
            },
            "coco": {
                "root": "../../data/coco/crop511",
                "anno": "../../data/coco/train2017.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 143,
        "base_size": 0,
        "size": 3,
        "num": 200000,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 8,
                "scale": 0.18,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.25
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2020-06-13 16:00:37,979-rk0-train_siammask_refine.py# 79] build train dataset
[2020-06-13 16:00:37,980-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 16:00:38,222-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 16:00:38,269-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 16:00:38,269-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 16:00:40,725-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 16:00:42,363-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 16:00:42,426-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 16:00:46,613-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:00:46,613-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 16:00:46,614-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 16:00:50,769-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:00:50,769-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 16:00:50,770-rk0-train_siammask_refine.py# 83] build val dataset
[2020-06-13 16:00:50,771-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 16:00:51,056-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 16:00:51,102-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 16:00:51,102-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 16:00:53,724-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 16:00:55,282-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 16:00:55,341-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 16:00:55,552-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:00:55,552-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 16:00:55,553-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 16:00:55,767-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:00:55,767-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 16:00:55,768-rk0-train_siammask_refine.py# 94] build dataset done
[2020-06-13 16:00:56,008-rk0-features.py# 67] Current training 0 layers:
	[]
[2020-06-13 16:00:56,008-rk0-features.py# 67] Current training 1 layers:
	[ResDownS(
  (downsample): Sequential(
    (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
)]
[2020-06-13 16:00:56,062-rk0-train_siammask_refine.py#143] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (mask_model): MaskCorr(
    (mask): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 3969, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (refine_model): Refine(
    (v0): Sequential(
      (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v1): Sequential(
      (0): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v2): Sequential(
      (0): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h2): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h1): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h0): Sequential(
      (0): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (deconv): ConvTranspose2d(256, 32, kernel_size=(15, 15), stride=(15, 15))
    (post0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post1): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post2): Conv2d(4, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[2020-06-13 16:02:18,360-rk0-train_siammask_refine.py#123] 
PyTorch version: 1.0.0
Is debug build: No
CUDA used to build PyTorch: 10.0.130

OS: Ubuntu 18.04.4 LTS
GCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CMake version: version 3.10.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: Could not collect
GPU models and configuration: GPU 0: GeForce RTX 2060
Nvidia driver version: 435.21
cuDNN version: Probably one of the following:
/usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.5
/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a

Versions of relevant libraries:
[pip3] torch (1.0.0)
[conda] torch                     1.0.0                    pypi_0    pypi
[conda] torchvision               0.2.1                    pypi_0    pypi
        OpenCV (3.4.3)
[2020-06-13 16:02:18,361-rk0-train_siammask_refine.py#124] Namespace(arch='', batch=8, clip=10.0, config='config.json', epochs=20, log='log.txt', log_dir='board', lr=0.001, momentum=0.9, pretrained='', print_freq=10, resume='', save_dir='snapshot', start_epoch=0, weight_decay=0.0001, workers=20)
[2020-06-13 16:02:18,361-rk0-train_siammask_refine.py#127] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8,
        "out_size": 127,
        "seg_thr": 0.35,
        "penalty_k": 0.04,
        "window_influence": 0.4,
        "lr": 1.0
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 0.0025
    },
    "loss": {
        "weight": [
            0,
            0,
            36
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "ytb_vos": {
                "root": "../../data/ytb_vos/crop511",
                "anno": "../../data/ytb_vos/train.json",
                "num_use": 100000,
                "frame_range": 20
            },
            "coco": {
                "root": "../../data/coco/crop511",
                "anno": "../../data/coco/train2017.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 143,
        "base_size": 0,
        "size": 3,
        "num": 200000,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 8,
                "scale": 0.18,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.25
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2020-06-13 16:02:18,362-rk0-train_siammask_refine.py# 79] build train dataset
[2020-06-13 16:02:18,363-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 16:02:18,615-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 16:02:18,665-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 16:02:18,665-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 16:02:21,200-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 16:02:22,762-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 16:02:22,830-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 16:02:27,470-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:02:27,470-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 16:02:27,471-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 16:02:32,057-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:02:32,057-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 16:02:32,058-rk0-train_siammask_refine.py# 83] build val dataset
[2020-06-13 16:02:32,059-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 16:02:32,346-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 16:02:32,396-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 16:02:32,396-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 16:02:35,298-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 16:02:36,936-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 16:02:37,005-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 16:02:37,250-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:02:37,250-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 16:02:37,250-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 16:02:37,493-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:02:37,493-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 16:02:37,494-rk0-train_siammask_refine.py# 94] build dataset done
[2020-06-13 16:02:37,770-rk0-features.py# 67] Current training 0 layers:
	[]
[2020-06-13 16:02:37,771-rk0-features.py# 67] Current training 1 layers:
	[ResDownS(
  (downsample): Sequential(
    (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
)]
[2020-06-13 16:02:37,827-rk0-train_siammask_refine.py#143] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (mask_model): MaskCorr(
    (mask): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 3969, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (refine_model): Refine(
    (v0): Sequential(
      (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v1): Sequential(
      (0): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v2): Sequential(
      (0): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h2): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h1): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h0): Sequential(
      (0): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (deconv): ConvTranspose2d(256, 32, kernel_size=(15, 15), stride=(15, 15))
    (post0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post1): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post2): Conv2d(4, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[2020-06-13 16:04:26,021-rk0-train_siammask_refine.py#123] 
PyTorch version: 1.0.0
Is debug build: No
CUDA used to build PyTorch: 10.0.130

OS: Ubuntu 18.04.4 LTS
GCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CMake version: version 3.10.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: Could not collect
GPU models and configuration: GPU 0: GeForce RTX 2060
Nvidia driver version: 435.21
cuDNN version: Probably one of the following:
/usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.5
/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a

Versions of relevant libraries:
[pip3] torch (1.0.0)
[conda] torch                     1.0.0                    pypi_0    pypi
[conda] torchvision               0.2.1                    pypi_0    pypi
        OpenCV (3.4.3)
[2020-06-13 16:04:26,021-rk0-train_siammask_refine.py#124] Namespace(arch='', batch=8, clip=10.0, config='config.json', epochs=20, log='log.txt', log_dir='board', lr=0.001, momentum=0.9, pretrained='', print_freq=10, resume='', save_dir='snapshot', start_epoch=0, weight_decay=0.0001, workers=20)
[2020-06-13 16:04:26,022-rk0-train_siammask_refine.py#127] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8,
        "out_size": 127,
        "seg_thr": 0.35,
        "penalty_k": 0.04,
        "window_influence": 0.4,
        "lr": 1.0
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 0.0025
    },
    "loss": {
        "weight": [
            0,
            0,
            36
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "ytb_vos": {
                "root": "../../data/ytb_vos/crop511",
                "anno": "../../data/ytb_vos/train.json",
                "num_use": 100000,
                "frame_range": 20
            },
            "coco": {
                "root": "../../data/coco/crop511",
                "anno": "../../data/coco/train2017.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 143,
        "base_size": 0,
        "size": 3,
        "num": 200000,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 8,
                "scale": 0.18,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.25
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2020-06-13 16:04:26,022-rk0-train_siammask_refine.py# 79] build train dataset
[2020-06-13 16:04:26,023-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 16:04:26,266-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 16:04:26,321-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 16:04:26,321-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 16:04:28,723-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 16:04:30,380-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 16:04:30,446-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 16:04:35,501-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:04:35,501-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 16:04:35,502-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 16:04:40,245-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:04:40,246-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 16:04:40,247-rk0-train_siammask_refine.py# 83] build val dataset
[2020-06-13 16:04:40,247-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 16:04:40,549-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 16:04:40,601-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 16:04:40,601-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 16:04:43,515-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 16:04:45,176-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 16:04:45,242-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 16:04:45,497-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:04:45,497-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 16:04:45,498-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 16:04:45,731-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:04:45,731-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 16:04:45,732-rk0-train_siammask_refine.py# 94] build dataset done
[2020-06-13 16:04:45,982-rk0-features.py# 67] Current training 0 layers:
	[]
[2020-06-13 16:04:45,982-rk0-features.py# 67] Current training 1 layers:
	[ResDownS(
  (downsample): Sequential(
    (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
)]
[2020-06-13 16:04:46,040-rk0-train_siammask_refine.py#143] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (mask_model): MaskCorr(
    (mask): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 3969, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (refine_model): Refine(
    (v0): Sequential(
      (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v1): Sequential(
      (0): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v2): Sequential(
      (0): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h2): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h1): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h0): Sequential(
      (0): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (deconv): ConvTranspose2d(256, 32, kernel_size=(15, 15), stride=(15, 15))
    (post0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post1): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post2): Conv2d(4, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[2020-06-13 16:04:48,555-rk0-train_siammask_refine.py#161] (LogScheduler) lr spaces: 
[0.01       0.00929635 0.00864222 0.00803411 0.00746879 0.00694326
 0.0064547  0.00600051 0.00557829 0.00518578 0.00482088 0.00448166
 0.00416631 0.00387315 0.00360062 0.00334726 0.00311173 0.00289278
 0.00268923 0.0025    ]
[2020-06-13 16:04:48,555-rk0-train_siammask_refine.py#163] model prepare done
[2020-06-13 16:04:52,147-rk0-train_siammask_refine.py#290] Epoch: [1][10/25000] lr: 0.010000	batch_time: 0.113879 (0.357635)	data_time: 0.000037 (0.086842)	rpn_cls_loss: 13553.838867 (5475.772266)	rpn_loc_loss: 151334.359375 (107783.725000)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000208 (0.000033)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:04:52,148-rk0-log_helper.py# 97] Progress: 10 / 500000 [0%], Speed: 0.358 s/iter, ETA 2:01:40 (D:H:M)

[2020-06-13 16:04:53,330-rk0-train_siammask_refine.py#290] Epoch: [1][20/25000] lr: 0.010000	batch_time: 0.117536 (0.237341)	data_time: 0.000036 (0.043469)	rpn_cls_loss: 11277.023438 (7031.332812)	rpn_loc_loss: 112931.000000 (106195.762500)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000037)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:04:53,331-rk0-log_helper.py# 97] Progress: 20 / 500000 [0%], Speed: 0.237 s/iter, ETA 1:08:57 (D:H:M)

[2020-06-13 16:04:54,516-rk0-train_siammask_refine.py#290] Epoch: [1][30/25000] lr: 0.010000	batch_time: 0.119298 (0.197337)	data_time: 0.000036 (0.029013)	rpn_cls_loss: 13756.878906 (7631.132292)	rpn_loc_loss: 60286.582031 (109833.075000)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000043)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:04:54,516-rk0-log_helper.py# 97] Progress: 30 / 500000 [0%], Speed: 0.197 s/iter, ETA 1:03:24 (D:H:M)

[2020-06-13 16:04:55,700-rk0-train_siammask_refine.py#290] Epoch: [1][40/25000] lr: 0.010000	batch_time: 0.117917 (0.177367)	data_time: 0.000031 (0.021782)	rpn_cls_loss: 14135.114258 (7876.478906)	rpn_loc_loss: 79616.953125 (108206.225000)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000045)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:04:55,700-rk0-log_helper.py# 97] Progress: 40 / 500000 [0%], Speed: 0.177 s/iter, ETA 1:00:37 (D:H:M)

[2020-06-13 16:04:56,883-rk0-train_siammask_refine.py#290] Epoch: [1][50/25000] lr: 0.010000	batch_time: 0.120391 (0.165349)	data_time: 0.000046 (0.017445)	rpn_cls_loss: 18247.423828 (8327.028750)	rpn_loc_loss: 130181.109375 (108757.540000)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000040)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:04:56,883-rk0-log_helper.py# 97] Progress: 50 / 500000 [0%], Speed: 0.165 s/iter, ETA 0:22:57 (D:H:M)

[2020-06-13 16:04:58,063-rk0-train_siammask_refine.py#290] Epoch: [1][60/25000] lr: 0.010000	batch_time: 0.116745 (0.157306)	data_time: 0.000052 (0.014555)	rpn_cls_loss: 9252.721680 (8371.331771)	rpn_loc_loss: 95404.843750 (108481.758333)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000084 (0.000048)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:04:58,064-rk0-log_helper.py# 97] Progress: 60 / 500000 [0%], Speed: 0.157 s/iter, ETA 0:21:50 (D:H:M)

[2020-06-13 16:04:59,246-rk0-train_siammask_refine.py#290] Epoch: [1][70/25000] lr: 0.010000	batch_time: 0.116258 (0.151589)	data_time: 0.000043 (0.012488)	rpn_cls_loss: 8963.333984 (8497.934821)	rpn_loc_loss: 101387.765625 (109362.500000)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000042)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:04:59,246-rk0-log_helper.py# 97] Progress: 70 / 500000 [0%], Speed: 0.152 s/iter, ETA 0:21:03 (D:H:M)

[2020-06-13 16:05:00,433-rk0-train_siammask_refine.py#290] Epoch: [1][80/25000] lr: 0.010000	batch_time: 0.118618 (0.147360)	data_time: 0.000047 (0.010939)	rpn_cls_loss: 5165.178711 (8447.778125)	rpn_loc_loss: 90821.109375 (108724.587500)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000040)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:05:00,433-rk0-log_helper.py# 97] Progress: 80 / 500000 [0%], Speed: 0.147 s/iter, ETA 0:20:27 (D:H:M)

[2020-06-13 16:05:01,617-rk0-train_siammask_refine.py#290] Epoch: [1][90/25000] lr: 0.010000	batch_time: 0.117012 (0.144041)	data_time: 0.000044 (0.009733)	rpn_cls_loss: 10299.026367 (8471.102778)	rpn_loc_loss: 127378.796875 (109117.866667)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000041)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:05:01,617-rk0-log_helper.py# 97] Progress: 90 / 500000 [0%], Speed: 0.144 s/iter, ETA 0:20:00 (D:H:M)

[2020-06-13 16:05:02,802-rk0-train_siammask_refine.py#290] Epoch: [1][100/25000] lr: 0.010000	batch_time: 0.119022 (0.141394)	data_time: 0.000044 (0.008770)	rpn_cls_loss: 15321.705078 (8411.877500)	rpn_loc_loss: 103331.945312 (109087.830000)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000042)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:05:02,802-rk0-log_helper.py# 97] Progress: 100 / 500000 [0%], Speed: 0.141 s/iter, ETA 0:19:38 (D:H:M)

[2020-06-13 16:05:03,991-rk0-train_siammask_refine.py#290] Epoch: [1][110/25000] lr: 0.010000	batch_time: 0.119096 (0.139249)	data_time: 0.000040 (0.007981)	rpn_cls_loss: 9819.625977 (8265.853409)	rpn_loc_loss: 95981.507812 (109056.863636)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000039)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:05:03,991-rk0-log_helper.py# 97] Progress: 110 / 500000 [0%], Speed: 0.139 s/iter, ETA 0:19:20 (D:H:M)

[2020-06-13 16:05:05,173-rk0-train_siammask_refine.py#290] Epoch: [1][120/25000] lr: 0.010000	batch_time: 0.116343 (0.137410)	data_time: 0.000046 (0.007323)	rpn_cls_loss: 6757.434570 (8252.014583)	rpn_loc_loss: 70085.515625 (109436.800000)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000039)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:05:05,173-rk0-log_helper.py# 97] Progress: 120 / 500000 [0%], Speed: 0.137 s/iter, ETA 0:19:04 (D:H:M)

[2020-06-13 16:05:06,363-rk0-train_siammask_refine.py#290] Epoch: [1][130/25000] lr: 0.010000	batch_time: 0.119645 (0.135924)	data_time: 0.000045 (0.006767)	rpn_cls_loss: 6265.375977 (8276.039423)	rpn_loc_loss: 76606.640625 (108629.692308)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000036)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:05:06,363-rk0-log_helper.py# 97] Progress: 130 / 500000 [0%], Speed: 0.136 s/iter, ETA 0:18:52 (D:H:M)

[2020-06-13 16:05:07,552-rk0-train_siammask_refine.py#290] Epoch: [1][140/25000] lr: 0.010000	batch_time: 0.117400 (0.134636)	data_time: 0.000045 (0.006290)	rpn_cls_loss: 8977.486328 (8191.868750)	rpn_loc_loss: 85979.546875 (108341.585714)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000035)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:05:07,552-rk0-log_helper.py# 97] Progress: 140 / 500000 [0%], Speed: 0.135 s/iter, ETA 0:18:41 (D:H:M)

[2020-06-13 16:05:08,737-rk0-train_siammask_refine.py#290] Epoch: [1][150/25000] lr: 0.010000	batch_time: 0.116993 (0.133482)	data_time: 0.000043 (0.005876)	rpn_cls_loss: 8954.839844 (8238.926667)	rpn_loc_loss: 109717.812500 (108096.060000)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.001760 (0.000044)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:05:08,737-rk0-log_helper.py# 97] Progress: 150 / 500000 [0%], Speed: 0.133 s/iter, ETA 0:18:32 (D:H:M)

[2020-06-13 16:05:09,930-rk0-train_siammask_refine.py#290] Epoch: [1][160/25000] lr: 0.010000	batch_time: 0.118968 (0.132532)	data_time: 0.000044 (0.005515)	rpn_cls_loss: 4464.837402 (8220.588281)	rpn_loc_loss: 116971.320312 (107995.062500)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000041)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:05:09,930-rk0-log_helper.py# 97] Progress: 160 / 500000 [0%], Speed: 0.133 s/iter, ETA 0:18:24 (D:H:M)

[2020-06-13 16:05:11,123-rk0-train_siammask_refine.py#290] Epoch: [1][170/25000] lr: 0.010000	batch_time: 0.117527 (0.131696)	data_time: 0.000051 (0.005196)	rpn_cls_loss: 5901.692383 (8214.794853)	rpn_loc_loss: 105290.085938 (108086.317647)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000041)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:05:11,123-rk0-log_helper.py# 97] Progress: 170 / 500000 [0%], Speed: 0.132 s/iter, ETA 0:18:17 (D:H:M)

[2020-06-13 16:05:12,319-rk0-train_siammask_refine.py#290] Epoch: [1][180/25000] lr: 0.010000	batch_time: 0.122043 (0.130973)	data_time: 0.000043 (0.004913)	rpn_cls_loss: 8801.608398 (8333.306250)	rpn_loc_loss: 127503.320312 (108391.722222)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000115 (0.000041)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:05:12,319-rk0-log_helper.py# 97] Progress: 180 / 500000 [0%], Speed: 0.131 s/iter, ETA 0:18:11 (D:H:M)

[2020-06-13 16:05:13,518-rk0-train_siammask_refine.py#290] Epoch: [1][190/25000] lr: 0.010000	batch_time: 0.121468 (0.130339)	data_time: 0.000046 (0.004660)	rpn_cls_loss: 12212.438477 (8359.366447)	rpn_loc_loss: 108687.226562 (107973.926316)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000255 (0.000040)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:05:13,518-rk0-log_helper.py# 97] Progress: 190 / 500000 [0%], Speed: 0.130 s/iter, ETA 0:18:05 (D:H:M)

[2020-06-13 16:05:14,708-rk0-train_siammask_refine.py#290] Epoch: [1][200/25000] lr: 0.010000	batch_time: 0.118025 (0.129727)	data_time: 0.000044 (0.004433)	rpn_cls_loss: 11684.093750 (8406.051875)	rpn_loc_loss: 133452.859375 (108380.340000)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000038)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:05:14,708-rk0-log_helper.py# 97] Progress: 200 / 500000 [0%], Speed: 0.130 s/iter, ETA 0:18:00 (D:H:M)

[2020-06-13 16:05:15,907-rk0-train_siammask_refine.py#290] Epoch: [1][210/25000] lr: 0.010000	batch_time: 0.117904 (0.129207)	data_time: 0.000103 (0.004226)	rpn_cls_loss: 10216.124023 (8406.868452)	rpn_loc_loss: 85988.953125 (107763.057143)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000037)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:05:15,907-rk0-log_helper.py# 97] Progress: 210 / 500000 [0%], Speed: 0.129 s/iter, ETA 0:17:56 (D:H:M)

[2020-06-13 16:05:17,120-rk0-train_siammask_refine.py#290] Epoch: [1][220/25000] lr: 0.010000	batch_time: 0.116866 (0.128806)	data_time: 0.000044 (0.004038)	rpn_cls_loss: 8374.621094 (8324.560795)	rpn_loc_loss: 134872.343750 (107574.772727)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000036)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:05:17,120-rk0-log_helper.py# 97] Progress: 220 / 500000 [0%], Speed: 0.129 s/iter, ETA 0:17:52 (D:H:M)

[2020-06-13 16:05:18,312-rk0-train_siammask_refine.py#290] Epoch: [1][230/25000] lr: 0.010000	batch_time: 0.116314 (0.128347)	data_time: 0.000044 (0.003867)	rpn_cls_loss: 9603.165039 (8311.228804)	rpn_loc_loss: 87221.179688 (107424.200000)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000036)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:05:18,312-rk0-log_helper.py# 97] Progress: 230 / 500000 [0%], Speed: 0.128 s/iter, ETA 0:17:49 (D:H:M)

[2020-06-13 16:05:19,515-rk0-train_siammask_refine.py#290] Epoch: [1][240/25000] lr: 0.010000	batch_time: 0.117293 (0.127964)	data_time: 0.000044 (0.003710)	rpn_cls_loss: 6146.630859 (8294.828125)	rpn_loc_loss: 98099.937500 (107398.133333)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000036)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:05:19,515-rk0-log_helper.py# 97] Progress: 240 / 500000 [0%], Speed: 0.128 s/iter, ETA 0:17:45 (D:H:M)

[2020-06-13 16:11:47,464-rk0-train_siammask_refine.py#123] 
PyTorch version: 1.0.0
Is debug build: No
CUDA used to build PyTorch: 10.0.130

OS: Ubuntu 18.04.4 LTS
GCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CMake version: version 3.10.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: Could not collect
GPU models and configuration: GPU 0: GeForce RTX 2060
Nvidia driver version: 435.21
cuDNN version: Probably one of the following:
/usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.5
/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a

Versions of relevant libraries:
[pip3] torch (1.0.0)
[conda] torch                     1.0.0                    pypi_0    pypi
[conda] torchvision               0.2.1                    pypi_0    pypi
        OpenCV (3.4.3)
[2020-06-13 16:11:47,464-rk0-train_siammask_refine.py#124] Namespace(arch='', batch=8, clip=10.0, config='config.json', epochs=20, log='log.txt', log_dir='board', lr=0.001, momentum=0.9, pretrained='', print_freq=10, resume='', save_dir='snapshot', start_epoch=0, weight_decay=0.0001, workers=20)
[2020-06-13 16:11:47,465-rk0-train_siammask_refine.py#127] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8,
        "out_size": 127,
        "seg_thr": 0.35,
        "penalty_k": 0.04,
        "window_influence": 0.4,
        "lr": 1.0
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 0.0025
    },
    "loss": {
        "weight": [
            0,
            0,
            36
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "ytb_vos": {
                "root": "../../data/ytb_vos/crop511",
                "anno": "../../data/ytb_vos/train.json",
                "num_use": 100000,
                "frame_range": 20
            },
            "coco": {
                "root": "../../data/coco/crop511",
                "anno": "../../data/coco/train2017.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 143,
        "base_size": 0,
        "size": 3,
        "num": 200000,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 8,
                "scale": 0.18,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.25
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2020-06-13 16:11:47,466-rk0-train_siammask_refine.py# 79] build train dataset
[2020-06-13 16:11:47,466-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 16:11:47,683-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 16:11:47,729-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 16:11:47,729-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 16:11:49,967-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 16:11:51,422-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 16:11:51,479-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 16:11:55,461-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:11:55,461-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 16:11:55,462-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 16:11:59,485-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:11:59,485-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 16:11:59,486-rk0-train_siammask_refine.py# 83] build val dataset
[2020-06-13 16:11:59,486-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 16:11:59,749-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 16:11:59,796-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 16:11:59,796-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 16:12:02,322-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 16:12:03,861-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 16:12:03,919-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 16:12:04,128-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:12:04,128-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 16:12:04,129-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 16:12:04,338-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:12:04,338-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 16:12:04,339-rk0-train_siammask_refine.py# 94] build dataset done
[2020-06-13 16:12:04,553-rk0-features.py# 67] Current training 0 layers:
	[]
[2020-06-13 16:12:04,553-rk0-features.py# 67] Current training 1 layers:
	[ResDownS(
  (downsample): Sequential(
    (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
)]
[2020-06-13 16:12:04,606-rk0-train_siammask_refine.py#143] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (mask_model): MaskCorr(
    (mask): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 3969, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (refine_model): Refine(
    (v0): Sequential(
      (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v1): Sequential(
      (0): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v2): Sequential(
      (0): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h2): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h1): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h0): Sequential(
      (0): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (deconv): ConvTranspose2d(256, 32, kernel_size=(15, 15), stride=(15, 15))
    (post0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post1): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post2): Conv2d(4, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[2020-06-13 16:12:06,497-rk0-train_siammask_refine.py#161] (LogScheduler) lr spaces: 
[0.01       0.00929635 0.00864222 0.00803411 0.00746879 0.00694326
 0.0064547  0.00600051 0.00557829 0.00518578 0.00482088 0.00448166
 0.00416631 0.00387315 0.00360062 0.00334726 0.00311173 0.00289278
 0.00268923 0.0025    ]
[2020-06-13 16:12:06,498-rk0-train_siammask_refine.py#163] model prepare done
[2020-06-13 16:12:10,142-rk0-train_siammask_refine.py#290] Epoch: [1][10/25000] lr: 0.010000	batch_time: 0.114536 (0.363131)	data_time: 0.000030 (0.084248)	rpn_cls_loss: 32463.580078 (25396.187500)	rpn_loc_loss: 148236.343750 (125395.925000)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.146652 (0.146186)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:12:10,142-rk0-log_helper.py# 97] Progress: 10 / 500000 [0%], Speed: 0.363 s/iter, ETA 2:02:26 (D:H:M)

[2020-06-13 16:12:11,314-rk0-train_siammask_refine.py#290] Epoch: [1][20/25000] lr: 0.010000	batch_time: 0.114219 (0.239672)	data_time: 0.000032 (0.042165)	rpn_cls_loss: 22724.988281 (23365.959375)	rpn_loc_loss: 160967.968750 (128404.925000)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.133252 (0.142912)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:12:11,314-rk0-log_helper.py# 97] Progress: 20 / 500000 [0%], Speed: 0.240 s/iter, ETA 1:09:17 (D:H:M)

[2020-06-13 16:12:12,491-rk0-train_siammask_refine.py#290] Epoch: [1][30/25000] lr: 0.010000	batch_time: 0.114971 (0.198692)	data_time: 0.000036 (0.028139)	rpn_cls_loss: 32029.910156 (25122.195833)	rpn_loc_loss: 115229.742188 (133490.441667)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.154438 (0.143336)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:12:12,491-rk0-log_helper.py# 97] Progress: 30 / 500000 [0%], Speed: 0.199 s/iter, ETA 1:03:35 (D:H:M)

[2020-06-13 16:12:13,674-rk0-train_siammask_refine.py#290] Epoch: [1][40/25000] lr: 0.010000	batch_time: 0.114270 (0.178370)	data_time: 0.000032 (0.021126)	rpn_cls_loss: 27113.960938 (24983.737500)	rpn_loc_loss: 110672.375000 (132691.200000)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.157716 (0.140688)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:12:13,674-rk0-log_helper.py# 97] Progress: 40 / 500000 [0%], Speed: 0.178 s/iter, ETA 1:00:46 (D:H:M)

[2020-06-13 16:12:14,851-rk0-train_siammask_refine.py#290] Epoch: [1][50/25000] lr: 0.010000	batch_time: 0.114534 (0.166055)	data_time: 0.000041 (0.016918)	rpn_cls_loss: 19957.863281 (24425.262500)	rpn_loc_loss: 131352.265625 (129441.550000)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.116593 (0.140513)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:12:14,851-rk0-log_helper.py# 97] Progress: 50 / 500000 [0%], Speed: 0.166 s/iter, ETA 0:23:03 (D:H:M)

[2020-06-13 16:16:17,314-rk0-train_siammask_refine.py#123] 
PyTorch version: 1.0.0
Is debug build: No
CUDA used to build PyTorch: 10.0.130

OS: Ubuntu 18.04.4 LTS
GCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CMake version: version 3.10.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: Could not collect
GPU models and configuration: GPU 0: GeForce RTX 2060
Nvidia driver version: 435.21
cuDNN version: Probably one of the following:
/usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.5
/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a

Versions of relevant libraries:
[pip3] torch (1.0.0)
[conda] torch                     1.0.0                    pypi_0    pypi
[conda] torchvision               0.2.1                    pypi_0    pypi
        OpenCV (3.4.3)
[2020-06-13 16:16:17,314-rk0-train_siammask_refine.py#124] Namespace(arch='', batch=8, clip=10.0, config='config.json', epochs=20, log='log.txt', log_dir='board', lr=0.001, momentum=0.9, pretrained='', print_freq=10, resume='', save_dir='snapshot', start_epoch=0, weight_decay=0.0001, workers=20)
[2020-06-13 16:16:17,315-rk0-train_siammask_refine.py#127] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8,
        "out_size": 127,
        "seg_thr": 0.35,
        "penalty_k": 0.04,
        "window_influence": 0.4,
        "lr": 1.0
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.005,
        "end_lr": 0.0025
    },
    "loss": {
        "weight": [
            0,
            0,
            36
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "ytb_vos": {
                "root": "../../data/ytb_vos/crop511",
                "anno": "../../data/ytb_vos/train.json",
                "num_use": 100000,
                "frame_range": 20
            },
            "coco": {
                "root": "../../data/coco/crop511",
                "anno": "../../data/coco/train2017.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 143,
        "base_size": 0,
        "size": 3,
        "num": 200000,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 8,
                "scale": 0.18,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.25
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2020-06-13 16:16:17,316-rk0-train_siammask_refine.py# 79] build train dataset
[2020-06-13 16:16:17,316-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 16:16:17,545-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 16:16:17,598-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 16:16:17,598-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 16:16:20,162-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 16:16:21,819-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 16:16:21,884-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 16:16:26,480-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:16:26,480-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 16:16:26,481-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 16:16:31,101-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:16:31,101-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 16:16:31,102-rk0-train_siammask_refine.py# 83] build val dataset
[2020-06-13 16:16:31,102-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 16:16:31,374-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 16:16:31,426-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 16:16:31,426-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 16:16:33,994-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 16:16:35,609-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 16:16:35,671-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 16:16:35,897-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:16:35,897-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 16:16:35,898-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 16:16:36,128-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:16:36,128-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 16:16:36,129-rk0-train_siammask_refine.py# 94] build dataset done
[2020-06-13 16:16:36,353-rk0-features.py# 67] Current training 0 layers:
	[]
[2020-06-13 16:16:36,354-rk0-features.py# 67] Current training 1 layers:
	[ResDownS(
  (downsample): Sequential(
    (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
)]
[2020-06-13 16:16:36,411-rk0-train_siammask_refine.py#143] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (mask_model): MaskCorr(
    (mask): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 3969, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (refine_model): Refine(
    (v0): Sequential(
      (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v1): Sequential(
      (0): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v2): Sequential(
      (0): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h2): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h1): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h0): Sequential(
      (0): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (deconv): ConvTranspose2d(256, 32, kernel_size=(15, 15), stride=(15, 15))
    (post0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post1): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post2): Conv2d(4, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[2020-06-13 16:16:38,567-rk0-train_siammask_refine.py#161] (LogScheduler) lr spaces: 
[0.005      0.00482088 0.00464818 0.00448166 0.00432111 0.00416631
 0.00401706 0.00387315 0.0037344  0.00360062 0.00347163 0.00334726
 0.00322735 0.00311173 0.00300026 0.00289278 0.00278914 0.00268923
 0.00259289 0.0025    ]
[2020-06-13 16:16:38,568-rk0-train_siammask_refine.py#163] model prepare done
[2020-06-13 16:16:42,467-rk0-train_siammask_refine.py#290] Epoch: [1][10/25000] lr: 0.005000	batch_time: 0.114148 (0.388402)	data_time: 0.000031 (0.106776)	rpn_cls_loss: 81652.375000 (60820.625000)	rpn_loc_loss: 358219.031250 (253402.850000)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000000)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:16:42,468-rk0-log_helper.py# 97] Progress: 10 / 500000 [0%], Speed: 0.388 s/iter, ETA 2:05:56 (D:H:M)

[2020-06-13 16:16:43,645-rk0-train_siammask_refine.py#290] Epoch: [1][20/25000] lr: 0.005000	batch_time: 0.114535 (0.252646)	data_time: 0.000036 (0.053431)	rpn_cls_loss: 76500.976562 (62104.162500)	rpn_loc_loss: 306975.000000 (256575.100000)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000000)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:16:43,645-rk0-log_helper.py# 97] Progress: 20 / 500000 [0%], Speed: 0.253 s/iter, ETA 1:11:05 (D:H:M)

[2020-06-13 16:16:44,829-rk0-train_siammask_refine.py#290] Epoch: [1][30/25000] lr: 0.005000	batch_time: 0.117033 (0.207589)	data_time: 0.000034 (0.035648)	rpn_cls_loss: 60459.121094 (62685.791667)	rpn_loc_loss: 241403.875000 (255366.833333)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000002)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:16:44,829-rk0-log_helper.py# 97] Progress: 30 / 500000 [0%], Speed: 0.208 s/iter, ETA 1:04:49 (D:H:M)

[2020-06-13 16:16:46,010-rk0-train_siammask_refine.py#290] Epoch: [1][40/25000] lr: 0.005000	batch_time: 0.118393 (0.185003)	data_time: 0.000034 (0.026754)	rpn_cls_loss: 65251.585938 (63353.456250)	rpn_loc_loss: 246978.562500 (255553.725000)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000001)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:16:46,010-rk0-log_helper.py# 97] Progress: 40 / 500000 [0%], Speed: 0.185 s/iter, ETA 1:01:41 (D:H:M)

[2020-06-13 16:16:47,194-rk0-train_siammask_refine.py#290] Epoch: [1][50/25000] lr: 0.005000	batch_time: 0.115422 (0.171483)	data_time: 0.000043 (0.021421)	rpn_cls_loss: 59404.843750 (62269.740000)	rpn_loc_loss: 274753.437500 (255163.640000)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000001)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:16:47,194-rk0-log_helper.py# 97] Progress: 50 / 500000 [0%], Speed: 0.171 s/iter, ETA 0:23:48 (D:H:M)

[2020-06-13 16:16:48,377-rk0-train_siammask_refine.py#290] Epoch: [1][60/25000] lr: 0.005000	batch_time: 0.115654 (0.162452)	data_time: 0.000043 (0.017866)	rpn_cls_loss: 40839.679688 (60574.058333)	rpn_loc_loss: 228492.687500 (256337.100000)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000001)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:16:48,378-rk0-log_helper.py# 97] Progress: 60 / 500000 [0%], Speed: 0.162 s/iter, ETA 0:22:33 (D:H:M)

[2020-06-13 16:16:49,560-rk0-train_siammask_refine.py#290] Epoch: [1][70/25000] lr: 0.005000	batch_time: 0.115029 (0.155987)	data_time: 0.000040 (0.015327)	rpn_cls_loss: 95467.109375 (62034.085714)	rpn_loc_loss: 298011.531250 (260363.142857)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000001)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:16:49,560-rk0-log_helper.py# 97] Progress: 70 / 500000 [0%], Speed: 0.156 s/iter, ETA 0:21:39 (D:H:M)

[2020-06-13 16:16:50,746-rk0-train_siammask_refine.py#290] Epoch: [1][80/25000] lr: 0.005000	batch_time: 0.115915 (0.151195)	data_time: 0.000042 (0.013423)	rpn_cls_loss: 92572.164062 (62301.075000)	rpn_loc_loss: 218660.687500 (258432.325000)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000001)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:16:50,746-rk0-log_helper.py# 97] Progress: 80 / 500000 [0%], Speed: 0.151 s/iter, ETA 0:20:59 (D:H:M)

[2020-06-13 16:16:51,933-rk0-train_siammask_refine.py#290] Epoch: [1][90/25000] lr: 0.005000	batch_time: 0.115394 (0.147475)	data_time: 0.000042 (0.011940)	rpn_cls_loss: 111263.750000 (64545.811111)	rpn_loc_loss: 312985.812500 (259433.711111)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000001)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:16:51,933-rk0-log_helper.py# 97] Progress: 90 / 500000 [0%], Speed: 0.147 s/iter, ETA 0:20:28 (D:H:M)

[2020-06-13 16:16:53,116-rk0-train_siammask_refine.py#290] Epoch: [1][100/25000] lr: 0.005000	batch_time: 0.116752 (0.144468)	data_time: 0.000047 (0.010754)	rpn_cls_loss: 63135.308594 (64561.550000)	rpn_loc_loss: 278723.375000 (260439.700000)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000001)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:16:53,116-rk0-log_helper.py# 97] Progress: 100 / 500000 [0%], Speed: 0.144 s/iter, ETA 0:20:03 (D:H:M)

[2020-06-13 16:16:54,302-rk0-train_siammask_refine.py#290] Epoch: [1][110/25000] lr: 0.005000	batch_time: 0.115004 (0.142030)	data_time: 0.000043 (0.009784)	rpn_cls_loss: 25959.296875 (63487.077273)	rpn_loc_loss: 177399.890625 (257980.236364)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000001)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:16:54,302-rk0-log_helper.py# 97] Progress: 110 / 500000 [0%], Speed: 0.142 s/iter, ETA 0:19:43 (D:H:M)

[2020-06-13 16:16:55,486-rk0-train_siammask_refine.py#290] Epoch: [1][120/25000] lr: 0.005000	batch_time: 0.116198 (0.139972)	data_time: 0.000041 (0.008976)	rpn_cls_loss: 80556.015625 (64666.791667)	rpn_loc_loss: 250885.453125 (258678.050000)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000002)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:16:55,486-rk0-log_helper.py# 97] Progress: 120 / 500000 [0%], Speed: 0.140 s/iter, ETA 0:19:26 (D:H:M)

[2020-06-13 16:16:56,674-rk0-train_siammask_refine.py#290] Epoch: [1][130/25000] lr: 0.005000	batch_time: 0.116372 (0.138274)	data_time: 0.000042 (0.008293)	rpn_cls_loss: 54777.164062 (64236.900000)	rpn_loc_loss: 223806.906250 (257310.907692)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000001)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:16:56,674-rk0-log_helper.py# 97] Progress: 130 / 500000 [0%], Speed: 0.138 s/iter, ETA 0:19:11 (D:H:M)

[2020-06-13 16:16:57,866-rk0-train_siammask_refine.py#290] Epoch: [1][140/25000] lr: 0.005000	batch_time: 0.115727 (0.136836)	data_time: 0.000044 (0.007709)	rpn_cls_loss: 50033.460938 (63492.200000)	rpn_loc_loss: 200017.234375 (256166.828571)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000002)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:16:57,866-rk0-log_helper.py# 97] Progress: 140 / 500000 [0%], Speed: 0.137 s/iter, ETA 0:18:59 (D:H:M)

[2020-06-13 16:16:59,055-rk0-train_siammask_refine.py#290] Epoch: [1][150/25000] lr: 0.005000	batch_time: 0.117305 (0.135563)	data_time: 0.000049 (0.007201)	rpn_cls_loss: 73627.304688 (63230.800000)	rpn_loc_loss: 272920.125000 (255797.173333)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000002)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:16:59,055-rk0-log_helper.py# 97] Progress: 150 / 500000 [0%], Speed: 0.136 s/iter, ETA 0:18:49 (D:H:M)

[2020-06-13 16:17:00,263-rk0-train_siammask_refine.py#290] Epoch: [1][160/25000] lr: 0.005000	batch_time: 0.116732 (0.134578)	data_time: 0.000042 (0.006757)	rpn_cls_loss: 59382.042969 (62840.093750)	rpn_loc_loss: 275109.250000 (255159.525000)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000002)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:17:00,263-rk0-log_helper.py# 97] Progress: 160 / 500000 [0%], Speed: 0.135 s/iter, ETA 0:18:41 (D:H:M)

[2020-06-13 16:17:01,452-rk0-train_siammask_refine.py#290] Epoch: [1][170/25000] lr: 0.005000	batch_time: 0.116025 (0.133607)	data_time: 0.000043 (0.006364)	rpn_cls_loss: 67112.390625 (62627.952941)	rpn_loc_loss: 273257.281250 (254766.164706)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000002)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:17:01,452-rk0-log_helper.py# 97] Progress: 170 / 500000 [0%], Speed: 0.134 s/iter, ETA 0:18:33 (D:H:M)

[2020-06-13 16:17:02,641-rk0-train_siammask_refine.py#290] Epoch: [1][180/25000] lr: 0.005000	batch_time: 0.116294 (0.132741)	data_time: 0.000042 (0.006015)	rpn_cls_loss: 67013.046875 (63077.222222)	rpn_loc_loss: 237629.968750 (255198.822222)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000002)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:17:02,641-rk0-log_helper.py# 97] Progress: 180 / 500000 [0%], Speed: 0.133 s/iter, ETA 0:18:25 (D:H:M)

[2020-06-13 16:17:03,837-rk0-train_siammask_refine.py#290] Epoch: [1][190/25000] lr: 0.005000	batch_time: 0.116352 (0.131995)	data_time: 0.000045 (0.005703)	rpn_cls_loss: 55208.214844 (62943.436842)	rpn_loc_loss: 209806.812500 (254004.568421)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000002)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:17:03,837-rk0-log_helper.py# 97] Progress: 190 / 500000 [0%], Speed: 0.132 s/iter, ETA 0:18:19 (D:H:M)

[2020-06-13 16:17:05,029-rk0-train_siammask_refine.py#290] Epoch: [1][200/25000] lr: 0.005000	batch_time: 0.117519 (0.131305)	data_time: 0.000047 (0.005422)	rpn_cls_loss: 47369.199219 (63238.745000)	rpn_loc_loss: 303160.500000 (255079.640000)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000002)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:17:05,029-rk0-log_helper.py# 97] Progress: 200 / 500000 [0%], Speed: 0.131 s/iter, ETA 0:18:13 (D:H:M)

[2020-06-13 16:17:06,229-rk0-train_siammask_refine.py#290] Epoch: [1][210/25000] lr: 0.005000	batch_time: 0.117629 (0.130711)	data_time: 0.000046 (0.005168)	rpn_cls_loss: 73057.101562 (63260.423810)	rpn_loc_loss: 251097.500000 (254898.685714)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000003)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:17:06,229-rk0-log_helper.py# 97] Progress: 210 / 500000 [0%], Speed: 0.131 s/iter, ETA 0:18:08 (D:H:M)

[2020-06-13 16:17:07,439-rk0-train_siammask_refine.py#290] Epoch: [1][220/25000] lr: 0.005000	batch_time: 0.121709 (0.130227)	data_time: 0.000088 (0.004937)	rpn_cls_loss: 72421.562500 (62958.177273)	rpn_loc_loss: 280216.000000 (254048.545455)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000003)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:17:07,439-rk0-log_helper.py# 97] Progress: 220 / 500000 [0%], Speed: 0.130 s/iter, ETA 0:18:04 (D:H:M)

[2020-06-13 16:17:08,649-rk0-train_siammask_refine.py#290] Epoch: [1][230/25000] lr: 0.005000	batch_time: 0.117576 (0.129779)	data_time: 0.000044 (0.004726)	rpn_cls_loss: 50825.546875 (63207.769565)	rpn_loc_loss: 262263.187500 (254093.686957)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000002)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:17:08,649-rk0-log_helper.py# 97] Progress: 230 / 500000 [0%], Speed: 0.130 s/iter, ETA 0:18:00 (D:H:M)

[2020-06-13 16:17:09,855-rk0-train_siammask_refine.py#290] Epoch: [1][240/25000] lr: 0.005000	batch_time: 0.118774 (0.129351)	data_time: 0.000043 (0.004533)	rpn_cls_loss: 55327.437500 (63477.450000)	rpn_loc_loss: 255089.109375 (254810.233333)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000002)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:17:09,855-rk0-log_helper.py# 97] Progress: 240 / 500000 [0%], Speed: 0.129 s/iter, ETA 0:17:57 (D:H:M)

[2020-06-13 16:17:11,055-rk0-train_siammask_refine.py#290] Epoch: [1][250/25000] lr: 0.005000	batch_time: 0.117365 (0.128930)	data_time: 0.000047 (0.004355)	rpn_cls_loss: 66435.179688 (63360.528000)	rpn_loc_loss: 242113.437500 (254701.616000)	rpn_mask_loss: inf (inf)	siammask_loss: inf (inf)	mask_iou_mean: 0.000000 (0.000002)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:17:11,055-rk0-log_helper.py# 97] Progress: 250 / 500000 [0%], Speed: 0.129 s/iter, ETA 0:17:53 (D:H:M)

[2020-06-13 16:19:31,150-rk0-train_siammask_refine.py#123] 
PyTorch version: 1.0.0
Is debug build: No
CUDA used to build PyTorch: 10.0.130

OS: Ubuntu 18.04.4 LTS
GCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CMake version: version 3.10.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: Could not collect
GPU models and configuration: GPU 0: GeForce RTX 2060
Nvidia driver version: 435.21
cuDNN version: Probably one of the following:
/usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.5
/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a

Versions of relevant libraries:
[pip3] torch (1.0.0)
[conda] torch                     1.0.0                    pypi_0    pypi
[conda] torchvision               0.2.1                    pypi_0    pypi
        OpenCV (3.4.3)
[2020-06-13 16:19:31,150-rk0-train_siammask_refine.py#124] Namespace(arch='', batch=8, clip=10.0, config='config.json', epochs=20, log='log.txt', log_dir='board', lr=0.001, momentum=0.9, pretrained='', print_freq=10, resume='', save_dir='snapshot', start_epoch=0, weight_decay=0.0001, workers=20)
[2020-06-13 16:19:31,150-rk0-train_siammask_refine.py#127] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8,
        "out_size": 127,
        "seg_thr": 0.35,
        "penalty_k": 0.04,
        "window_influence": 0.4,
        "lr": 0.1
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.001,
        "end_lr": 0.0025
    },
    "loss": {
        "weight": [
            0,
            0,
            36
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "ytb_vos": {
                "root": "../../data/ytb_vos/crop511",
                "anno": "../../data/ytb_vos/train.json",
                "num_use": 100000,
                "frame_range": 20
            },
            "coco": {
                "root": "../../data/coco/crop511",
                "anno": "../../data/coco/train2017.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 143,
        "base_size": 0,
        "size": 3,
        "num": 200000,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 8,
                "scale": 0.18,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.25
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2020-06-13 16:19:31,151-rk0-train_siammask_refine.py# 79] build train dataset
[2020-06-13 16:19:31,152-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 16:19:31,396-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 16:19:31,449-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 16:19:31,449-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 16:19:33,958-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 16:19:35,663-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 16:19:35,732-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 16:19:40,743-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:19:40,743-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 16:19:40,744-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 16:19:45,894-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:19:45,894-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 16:19:45,895-rk0-train_siammask_refine.py# 83] build val dataset
[2020-06-13 16:19:45,896-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 16:19:46,192-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 16:19:46,250-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 16:19:46,250-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 16:19:49,123-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 16:19:50,932-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 16:19:51,007-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 16:19:51,277-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:19:51,277-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 16:19:51,278-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 16:19:51,564-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:19:51,564-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 16:19:51,566-rk0-train_siammask_refine.py# 94] build dataset done
[2020-06-13 16:19:51,809-rk0-features.py# 67] Current training 0 layers:
	[]
[2020-06-13 16:19:51,810-rk0-features.py# 67] Current training 1 layers:
	[ResDownS(
  (downsample): Sequential(
    (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
)]
[2020-06-13 16:19:51,876-rk0-train_siammask_refine.py#143] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (mask_model): MaskCorr(
    (mask): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 3969, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (refine_model): Refine(
    (v0): Sequential(
      (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v1): Sequential(
      (0): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v2): Sequential(
      (0): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h2): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h1): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h0): Sequential(
      (0): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (deconv): ConvTranspose2d(256, 32, kernel_size=(15, 15), stride=(15, 15))
    (post0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post1): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post2): Conv2d(4, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[2020-06-13 16:19:54,170-rk0-train_siammask_refine.py#161] (LogScheduler) lr spaces: 
[0.001      0.00104941 0.00110126 0.00115567 0.00121277 0.00127269
 0.00133557 0.00140155 0.0014708  0.00154347 0.00161973 0.00169975
 0.00178374 0.00187187 0.00196435 0.0020614  0.00216325 0.00227013
 0.0023823  0.0025    ]
[2020-06-13 16:19:54,170-rk0-train_siammask_refine.py#163] model prepare done
[2020-06-13 16:19:57,719-rk0-train_siammask_refine.py#290] Epoch: [1][10/25000] lr: 0.001000	batch_time: 0.122027 (0.353761)	data_time: 0.000033 (0.081534)	rpn_cls_loss: 50692.527344 (47998.053125)	rpn_loc_loss: 907343.125000 (600670.950000)	rpn_mask_loss: 1.009664 (1.412870)	siammask_loss: 36.347908 (50.863306)	mask_iou_mean: 0.019456 (0.054645)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:19:57,719-rk0-log_helper.py# 97] Progress: 10 / 500000 [0%], Speed: 0.354 s/iter, ETA 2:01:07 (D:H:M)

[2020-06-13 16:19:58,915-rk0-train_siammask_refine.py#290] Epoch: [1][20/25000] lr: 0.001000	batch_time: 0.118930 (0.236279)	data_time: 0.000034 (0.040818)	rpn_cls_loss: 45391.843750 (45437.218750)	rpn_loc_loss: 687716.375000 (585186.000000)	rpn_mask_loss: 0.505177 (0.983181)	siammask_loss: 18.186361 (35.394502)	mask_iou_mean: 0.001850 (0.045038)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:19:58,915-rk0-log_helper.py# 97] Progress: 20 / 500000 [0%], Speed: 0.236 s/iter, ETA 1:08:48 (D:H:M)

[2020-06-13 16:20:00,108-rk0-train_siammask_refine.py#290] Epoch: [1][30/25000] lr: 0.001000	batch_time: 0.118986 (0.197039)	data_time: 0.000029 (0.027244)	rpn_cls_loss: 49989.964844 (46213.862500)	rpn_loc_loss: 575715.500000 (603961.133333)	rpn_mask_loss: 0.464160 (0.806075)	siammask_loss: 16.709751 (29.018688)	mask_iou_mean: 0.034706 (0.037386)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:20:00,108-rk0-log_helper.py# 97] Progress: 30 / 500000 [0%], Speed: 0.197 s/iter, ETA 1:03:21 (D:H:M)

[2020-06-13 16:20:01,299-rk0-train_siammask_refine.py#290] Epoch: [1][40/25000] lr: 0.001000	batch_time: 0.117667 (0.177349)	data_time: 0.000029 (0.020454)	rpn_cls_loss: 21692.580078 (45361.037500)	rpn_loc_loss: 430754.312500 (593478.450000)	rpn_mask_loss: 0.346473 (0.708855)	siammask_loss: 12.473032 (25.518768)	mask_iou_mean: 0.005137 (0.038319)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:20:01,299-rk0-log_helper.py# 97] Progress: 40 / 500000 [0%], Speed: 0.177 s/iter, ETA 1:00:37 (D:H:M)

[2020-06-13 16:20:02,491-rk0-train_siammask_refine.py#290] Epoch: [1][50/25000] lr: 0.001000	batch_time: 0.118365 (0.165559)	data_time: 0.000040 (0.016382)	rpn_cls_loss: 36875.132812 (44672.825000)	rpn_loc_loss: 501277.062500 (582421.280000)	rpn_mask_loss: 0.432579 (0.657445)	siammask_loss: 15.572826 (23.668026)	mask_iou_mean: 0.000167 (0.032383)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:20:02,492-rk0-log_helper.py# 97] Progress: 50 / 500000 [0%], Speed: 0.166 s/iter, ETA 0:22:59 (D:H:M)

[2020-06-13 16:20:03,686-rk0-train_siammask_refine.py#290] Epoch: [1][60/25000] lr: 0.001000	batch_time: 0.117834 (0.157760)	data_time: 0.000039 (0.013668)	rpn_cls_loss: 33112.945312 (44256.137500)	rpn_loc_loss: 541178.562500 (584527.733333)	rpn_mask_loss: 0.393694 (0.612177)	siammask_loss: 14.172975 (22.038378)	mask_iou_mean: 0.004258 (0.030442)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:20:03,686-rk0-log_helper.py# 97] Progress: 60 / 500000 [0%], Speed: 0.158 s/iter, ETA 0:21:54 (D:H:M)

[2020-06-13 16:20:04,882-rk0-train_siammask_refine.py#290] Epoch: [1][70/25000] lr: 0.001000	batch_time: 0.118933 (0.152201)	data_time: 0.000048 (0.011729)	rpn_cls_loss: 27304.414062 (45331.592857)	rpn_loc_loss: 595991.875000 (589943.714286)	rpn_mask_loss: 0.482555 (0.583659)	siammask_loss: 17.371977 (21.011716)	mask_iou_mean: 0.000000 (0.028171)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:20:04,883-rk0-log_helper.py# 97] Progress: 70 / 500000 [0%], Speed: 0.152 s/iter, ETA 0:21:08 (D:H:M)

[2020-06-13 16:20:06,077-rk0-train_siammask_refine.py#290] Epoch: [1][80/25000] lr: 0.001000	batch_time: 0.117975 (0.148004)	data_time: 0.000041 (0.010276)	rpn_cls_loss: 31262.582031 (45165.809375)	rpn_loc_loss: 463616.937500 (585857.900000)	rpn_mask_loss: 0.378273 (0.555118)	siammask_loss: 13.617825 (19.984241)	mask_iou_mean: 0.002617 (0.025583)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:20:06,077-rk0-log_helper.py# 97] Progress: 80 / 500000 [0%], Speed: 0.148 s/iter, ETA 0:20:33 (D:H:M)

[2020-06-13 16:20:07,274-rk0-train_siammask_refine.py#290] Epoch: [1][90/25000] lr: 0.001000	batch_time: 0.117729 (0.144761)	data_time: 0.000042 (0.009146)	rpn_cls_loss: 38661.742188 (44719.477778)	rpn_loc_loss: 695470.625000 (583088.133333)	rpn_mask_loss: 0.347892 (0.531777)	siammask_loss: 12.524116 (19.143981)	mask_iou_mean: 0.011893 (0.023432)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:20:07,274-rk0-log_helper.py# 97] Progress: 90 / 500000 [0%], Speed: 0.145 s/iter, ETA 0:20:06 (D:H:M)

[2020-06-13 16:20:08,471-rk0-train_siammask_refine.py#290] Epoch: [1][100/25000] lr: 0.001000	batch_time: 0.120028 (0.142175)	data_time: 0.000042 (0.008240)	rpn_cls_loss: 25575.705078 (44980.215000)	rpn_loc_loss: 486664.906250 (581991.600000)	rpn_mask_loss: 0.353604 (0.512271)	siammask_loss: 12.729727 (18.441738)	mask_iou_mean: 0.026755 (0.023514)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:20:08,471-rk0-log_helper.py# 97] Progress: 100 / 500000 [0%], Speed: 0.142 s/iter, ETA 0:19:44 (D:H:M)

[2020-06-13 16:20:09,672-rk0-train_siammask_refine.py#290] Epoch: [1][110/25000] lr: 0.001000	batch_time: 0.117928 (0.140088)	data_time: 0.000040 (0.007501)	rpn_cls_loss: 21717.970703 (44908.540909)	rpn_loc_loss: 488356.312500 (582344.618182)	rpn_mask_loss: 0.586802 (0.498366)	siammask_loss: 21.124884 (17.941178)	mask_iou_mean: 0.000000 (0.022242)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:20:09,672-rk0-log_helper.py# 97] Progress: 110 / 500000 [0%], Speed: 0.140 s/iter, ETA 0:19:27 (D:H:M)

[2020-06-13 16:20:10,873-rk0-train_siammask_refine.py#290] Epoch: [1][120/25000] lr: 0.001000	batch_time: 0.118702 (0.138353)	data_time: 0.000041 (0.006884)	rpn_cls_loss: 42497.019531 (45155.395833)	rpn_loc_loss: 634019.187500 (587281.466667)	rpn_mask_loss: 0.331229 (0.490909)	siammask_loss: 11.924252 (17.672733)	mask_iou_mean: 0.017154 (0.021338)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:20:10,873-rk0-log_helper.py# 97] Progress: 120 / 500000 [0%], Speed: 0.138 s/iter, ETA 0:19:12 (D:H:M)

[2020-06-13 16:20:12,075-rk0-train_siammask_refine.py#290] Epoch: [1][130/25000] lr: 0.001000	batch_time: 0.118607 (0.136900)	data_time: 0.000042 (0.006361)	rpn_cls_loss: 51676.664062 (45394.230769)	rpn_loc_loss: 508282.000000 (584372.430769)	rpn_mask_loss: 0.272666 (0.477456)	siammask_loss: 9.815959 (17.188415)	mask_iou_mean: 0.017463 (0.020658)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:20:12,075-rk0-log_helper.py# 97] Progress: 130 / 500000 [0%], Speed: 0.137 s/iter, ETA 0:19:00 (D:H:M)

[2020-06-13 16:20:13,276-rk0-train_siammask_refine.py#290] Epoch: [1][140/25000] lr: 0.001000	batch_time: 0.118371 (0.135642)	data_time: 0.000041 (0.005915)	rpn_cls_loss: 46795.082031 (45166.139286)	rpn_loc_loss: 547387.312500 (583899.542857)	rpn_mask_loss: 0.280180 (0.465267)	siammask_loss: 10.086482 (16.749602)	mask_iou_mean: 0.011055 (0.020031)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:20:13,276-rk0-log_helper.py# 97] Progress: 140 / 500000 [0%], Speed: 0.136 s/iter, ETA 0:18:50 (D:H:M)

[2020-06-13 16:20:14,484-rk0-train_siammask_refine.py#290] Epoch: [1][150/25000] lr: 0.001000	batch_time: 0.120131 (0.134597)	data_time: 0.000041 (0.005527)	rpn_cls_loss: 40846.082031 (44681.873333)	rpn_loc_loss: 628286.250000 (581858.506667)	rpn_mask_loss: 0.343522 (0.453637)	siammask_loss: 12.366796 (16.330913)	mask_iou_mean: 0.003872 (0.019283)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:20:14,484-rk0-log_helper.py# 97] Progress: 150 / 500000 [0%], Speed: 0.135 s/iter, ETA 0:18:41 (D:H:M)

[2020-06-13 16:20:15,688-rk0-train_siammask_refine.py#290] Epoch: [1][160/25000] lr: 0.001000	batch_time: 0.121017 (0.133664)	data_time: 0.000041 (0.005188)	rpn_cls_loss: 74355.398438 (44608.303125)	rpn_loc_loss: 730974.250000 (583614.500000)	rpn_mask_loss: 0.302704 (0.443240)	siammask_loss: 10.897350 (15.956652)	mask_iou_mean: 0.004545 (0.018474)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:20:15,688-rk0-log_helper.py# 97] Progress: 160 / 500000 [0%], Speed: 0.134 s/iter, ETA 0:18:33 (D:H:M)

[2020-06-13 16:20:16,897-rk0-train_siammask_refine.py#290] Epoch: [1][170/25000] lr: 0.001000	batch_time: 0.120332 (0.132860)	data_time: 0.000051 (0.004889)	rpn_cls_loss: 51296.812500 (44635.841176)	rpn_loc_loss: 556571.875000 (583430.917647)	rpn_mask_loss: 0.337504 (0.434914)	siammask_loss: 12.150144 (15.656893)	mask_iou_mean: 0.000082 (0.017702)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:20:16,897-rk0-log_helper.py# 97] Progress: 170 / 500000 [0%], Speed: 0.133 s/iter, ETA 0:18:26 (D:H:M)

[2020-06-13 16:20:18,104-rk0-train_siammask_refine.py#290] Epoch: [1][180/25000] lr: 0.001000	batch_time: 0.117802 (0.132134)	data_time: 0.000039 (0.004623)	rpn_cls_loss: 36897.074219 (44673.375000)	rpn_loc_loss: 564008.937500 (586300.800000)	rpn_mask_loss: 0.278316 (0.426114)	siammask_loss: 10.019370 (15.340099)	mask_iou_mean: 0.001245 (0.017150)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:20:18,104-rk0-log_helper.py# 97] Progress: 180 / 500000 [0%], Speed: 0.132 s/iter, ETA 0:18:20 (D:H:M)

[2020-06-13 16:20:19,312-rk0-train_siammask_refine.py#290] Epoch: [1][190/25000] lr: 0.001000	batch_time: 0.119401 (0.131496)	data_time: 0.000044 (0.004386)	rpn_cls_loss: 40409.300781 (44274.336842)	rpn_loc_loss: 508458.531250 (583166.610526)	rpn_mask_loss: 0.256447 (0.418217)	siammask_loss: 9.232080 (15.055822)	mask_iou_mean: 0.000961 (0.016538)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:20:19,312-rk0-log_helper.py# 97] Progress: 190 / 500000 [0%], Speed: 0.131 s/iter, ETA 0:18:15 (D:H:M)

[2020-06-13 16:20:20,528-rk0-train_siammask_refine.py#290] Epoch: [1][200/25000] lr: 0.001000	batch_time: 0.120496 (0.130962)	data_time: 0.000047 (0.004172)	rpn_cls_loss: 26795.240234 (44489.255000)	rpn_loc_loss: 586190.812500 (583443.000000)	rpn_mask_loss: 0.264135 (0.410440)	siammask_loss: 9.508865 (14.775826)	mask_iou_mean: 0.010437 (0.016148)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:20:20,528-rk0-log_helper.py# 97] Progress: 200 / 500000 [0%], Speed: 0.131 s/iter, ETA 0:18:10 (D:H:M)

[2020-06-13 16:20:21,739-rk0-train_siammask_refine.py#290] Epoch: [1][210/25000] lr: 0.001000	batch_time: 0.119215 (0.130454)	data_time: 0.000043 (0.003978)	rpn_cls_loss: 27225.398438 (44451.190476)	rpn_loc_loss: 522969.625000 (583605.561905)	rpn_mask_loss: 0.286265 (0.405464)	siammask_loss: 10.305536 (14.596705)	mask_iou_mean: 0.001143 (0.015612)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:20:21,739-rk0-log_helper.py# 97] Progress: 210 / 500000 [0%], Speed: 0.130 s/iter, ETA 0:18:06 (D:H:M)

[2020-06-13 16:20:22,949-rk0-train_siammask_refine.py#290] Epoch: [1][220/25000] lr: 0.001000	batch_time: 0.121040 (0.129991)	data_time: 0.000047 (0.003802)	rpn_cls_loss: 56109.531250 (44366.022727)	rpn_loc_loss: 623672.625000 (583108.327273)	rpn_mask_loss: 0.245542 (0.399753)	siammask_loss: 8.839511 (14.391117)	mask_iou_mean: 0.011696 (0.015101)	mask_iou_at_5: 0.000000 (0.000000)	mask_iou_at_7: 0.000000 (0.000000)
[2020-06-13 16:20:22,949-rk0-log_helper.py# 97] Progress: 220 / 500000 [0%], Speed: 0.130 s/iter, ETA 0:18:02 (D:H:M)

[2020-06-13 16:22:13,816-rk0-train_siammask_refine.py#123] 
PyTorch version: 1.0.0
Is debug build: No
CUDA used to build PyTorch: 10.0.130

OS: Ubuntu 18.04.4 LTS
GCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CMake version: version 3.10.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: Could not collect
GPU models and configuration: GPU 0: GeForce RTX 2060
Nvidia driver version: 435.21
cuDNN version: Probably one of the following:
/usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.5
/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a

Versions of relevant libraries:
[pip3] torch (1.0.0)
[conda] torch                     1.0.0                    pypi_0    pypi
[conda] torchvision               0.2.1                    pypi_0    pypi
        OpenCV (3.4.3)
[2020-06-13 16:22:13,816-rk0-train_siammask_refine.py#124] Namespace(arch='', batch=8, clip=10.0, config='config.json', epochs=20, log='log.txt', log_dir='board', lr=0.001, momentum=0.9, pretrained='', print_freq=10, resume='', save_dir='snapshot', start_epoch=0, weight_decay=0.0001, workers=20)
[2020-06-13 16:22:13,824-rk0-train_siammask_refine.py#127] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8,
        "out_size": 127,
        "seg_thr": 0.35,
        "penalty_k": 0.04,
        "window_influence": 0.4,
        "lr": 0.1
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.001,
        "end_lr": 0.0025
    },
    "loss": {
        "weight": [
            0,
            0,
            36
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "ytb_vos": {
                "root": "../../data/ytb_vos/crop511",
                "anno": "../../data/ytb_vos/train.json",
                "num_use": 100000,
                "frame_range": 20
            },
            "coco": {
                "root": "../../data/coco/crop511",
                "anno": "../../data/coco/train2017.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 143,
        "base_size": 0,
        "size": 3,
        "num": 200000,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 8,
                "scale": 0.18,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.25
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2020-06-13 16:22:13,825-rk0-train_siammask_refine.py# 79] build train dataset
[2020-06-13 16:22:13,827-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 16:22:14,291-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 16:22:14,513-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 16:22:14,513-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 16:22:17,113-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 16:22:20,349-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 16:22:20,652-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 16:22:40,248-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:22:40,248-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 16:22:40,250-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 16:22:59,068-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:22:59,068-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 16:22:59,069-rk0-train_siammask_refine.py# 83] build val dataset
[2020-06-13 16:22:59,070-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 16:22:59,613-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 16:22:59,857-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 16:22:59,857-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 16:23:02,917-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 16:23:06,435-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 16:23:06,718-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 16:23:07,766-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:23:07,766-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 16:23:07,767-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 16:23:08,825-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 16:23:08,825-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 16:23:08,827-rk0-train_siammask_refine.py# 94] build dataset done
[2020-06-13 16:23:35,129-rk0-features.py# 67] Current training 0 layers:
	[]
[2020-06-13 16:23:35,139-rk0-features.py# 67] Current training 1 layers:
	[ResDownS(
  (downsample): Sequential(
    (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
)]
[2020-06-13 16:23:35,208-rk0-train_siammask_refine.py#143] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (mask_model): MaskCorr(
    (mask): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 3969, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (refine_model): Refine(
    (v0): Sequential(
      (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v1): Sequential(
      (0): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v2): Sequential(
      (0): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h2): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h1): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h0): Sequential(
      (0): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (deconv): ConvTranspose2d(256, 32, kernel_size=(15, 15), stride=(15, 15))
    (post0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post1): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post2): Conv2d(4, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[2020-06-13 16:23:37,505-rk0-train_siammask_refine.py#161] (LogScheduler) lr spaces: 
[0.001      0.00104941 0.00110126 0.00115567 0.00121277 0.00127269
 0.00133557 0.00140155 0.0014708  0.00154347 0.00161973 0.00169975
 0.00178374 0.00187187 0.00196435 0.0020614  0.00216325 0.00227013
 0.0023823  0.0025    ]
[2020-06-13 16:23:37,508-rk0-train_siammask_refine.py#163] model prepare done
[2020-06-13 17:01:31,461-rk0-train_siammask_refine.py#123] 
PyTorch version: 1.0.0
Is debug build: No
CUDA used to build PyTorch: 10.0.130

OS: Ubuntu 18.04.4 LTS
GCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CMake version: version 3.10.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: Could not collect
GPU models and configuration: GPU 0: GeForce RTX 2060
Nvidia driver version: 435.21
cuDNN version: Probably one of the following:
/usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.5
/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a

Versions of relevant libraries:
[pip3] torch (1.0.0)
[conda] torch                     1.0.0                    pypi_0    pypi
[conda] torchvision               0.2.1                    pypi_0    pypi
        OpenCV (3.4.3)
[2020-06-13 17:01:31,462-rk0-train_siammask_refine.py#124] Namespace(arch='', batch=8, clip=10.0, config='config.json', epochs=20, log='log.txt', log_dir='board', lr=0.001, momentum=0.9, pretrained='', print_freq=10, resume='', save_dir='snapshot', start_epoch=0, weight_decay=0.0001, workers=20)
[2020-06-13 17:01:31,469-rk0-train_siammask_refine.py#127] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8,
        "out_size": 127,
        "seg_thr": 0.35,
        "penalty_k": 0.04,
        "window_influence": 0.4,
        "lr": 0.1
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.001,
        "end_lr": 0.0025
    },
    "loss": {
        "weight": [
            0,
            0,
            36
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "ytb_vos": {
                "root": "../../data/ytb_vos/crop511",
                "anno": "../../data/ytb_vos/train.json",
                "num_use": 100000,
                "frame_range": 20
            },
            "coco": {
                "root": "../../data/coco/crop511",
                "anno": "../../data/coco/train2017.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 143,
        "base_size": 0,
        "size": 3,
        "num": 200000,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 8,
                "scale": 0.18,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.25
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2020-06-13 17:01:31,471-rk0-train_siammask_refine.py# 79] build train dataset
[2020-06-13 17:01:31,473-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 17:01:31,946-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 17:01:32,179-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 17:01:32,180-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 17:01:34,843-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 17:01:38,006-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 17:01:38,269-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 17:01:56,673-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:01:56,673-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 17:01:56,674-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 17:02:15,224-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:02:15,224-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 17:02:15,226-rk0-train_siammask_refine.py# 83] build val dataset
[2020-06-13 17:02:15,227-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 17:02:15,750-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 17:02:15,992-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 17:02:15,992-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 17:02:19,262-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 17:02:22,781-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 17:02:23,073-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 17:02:24,147-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:02:24,147-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 17:02:24,156-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 17:02:25,281-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:02:25,282-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 17:02:25,283-rk0-train_siammask_refine.py# 94] build dataset done
[2020-06-13 17:02:25,614-rk0-features.py# 67] Current training 0 layers:
	[]
[2020-06-13 17:02:25,625-rk0-features.py# 67] Current training 1 layers:
	[ResDownS(
  (downsample): Sequential(
    (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
)]
[2020-06-13 17:02:25,689-rk0-train_siammask_refine.py#143] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (mask_model): MaskCorr(
    (mask): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 3969, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (refine_model): Refine(
    (v0): Sequential(
      (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v1): Sequential(
      (0): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v2): Sequential(
      (0): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h2): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h1): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h0): Sequential(
      (0): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (deconv): ConvTranspose2d(256, 32, kernel_size=(15, 15), stride=(15, 15))
    (post0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post1): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post2): Conv2d(4, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[2020-06-13 17:02:28,135-rk0-train_siammask_refine.py#161] (LogScheduler) lr spaces: 
[0.001      0.00104941 0.00110126 0.00115567 0.00121277 0.00127269
 0.00133557 0.00140155 0.0014708  0.00154347 0.00161973 0.00169975
 0.00178374 0.00187187 0.00196435 0.0020614  0.00216325 0.00227013
 0.0023823  0.0025    ]
[2020-06-13 17:02:28,137-rk0-train_siammask_refine.py#163] model prepare done
[2020-06-13 17:03:35,135-rk0-train_siammask_refine.py#123] 
PyTorch version: 1.0.0
Is debug build: No
CUDA used to build PyTorch: 10.0.130

OS: Ubuntu 18.04.4 LTS
GCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CMake version: version 3.10.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: Could not collect
GPU models and configuration: GPU 0: GeForce RTX 2060
Nvidia driver version: 435.21
cuDNN version: Probably one of the following:
/usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.5
/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a

Versions of relevant libraries:
[pip3] torch (1.0.0)
[conda] torch                     1.0.0                    pypi_0    pypi
[conda] torchvision               0.2.1                    pypi_0    pypi
        OpenCV (3.4.3)
[2020-06-13 17:03:35,135-rk0-train_siammask_refine.py#124] Namespace(arch='', batch=8, clip=10.0, config='config.json', epochs=20, log='log.txt', log_dir='board', lr=0.001, momentum=0.9, pretrained='', print_freq=10, resume='', save_dir='snapshot', start_epoch=0, weight_decay=0.0001, workers=20)
[2020-06-13 17:03:35,143-rk0-train_siammask_refine.py#127] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8,
        "out_size": 127,
        "seg_thr": 0.35,
        "penalty_k": 0.04,
        "window_influence": 0.4,
        "lr": 0.1
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.001,
        "end_lr": 0.0025
    },
    "loss": {
        "weight": [
            0,
            0,
            36
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "ytb_vos": {
                "root": "../../data/ytb_vos/crop511",
                "anno": "../../data/ytb_vos/train.json",
                "num_use": 100000,
                "frame_range": 20
            },
            "coco": {
                "root": "../../data/coco/crop511",
                "anno": "../../data/coco/train2017.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 143,
        "base_size": 0,
        "size": 3,
        "num": 200000,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 8,
                "scale": 0.18,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.25
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2020-06-13 17:03:35,145-rk0-train_siammask_refine.py# 79] build train dataset
[2020-06-13 17:03:35,146-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 17:03:35,633-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 17:03:35,869-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 17:03:35,869-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 17:03:38,744-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 17:03:42,327-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 17:03:42,624-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 17:04:04,023-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:04:04,023-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 17:04:04,024-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 17:04:24,716-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:04:24,716-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 17:04:24,717-rk0-train_siammask_refine.py# 83] build val dataset
[2020-06-13 17:04:24,718-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 17:04:25,250-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 17:04:25,483-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 17:04:25,483-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 17:04:28,546-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 17:04:32,015-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 17:04:32,304-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 17:04:33,351-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:04:33,351-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 17:04:33,353-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 17:04:34,421-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:04:34,421-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 17:04:34,423-rk0-train_siammask_refine.py# 94] build dataset done
[2020-06-13 17:04:34,741-rk0-features.py# 67] Current training 0 layers:
	[]
[2020-06-13 17:04:34,751-rk0-features.py# 67] Current training 1 layers:
	[ResDownS(
  (downsample): Sequential(
    (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
)]
[2020-06-13 17:04:34,816-rk0-train_siammask_refine.py#143] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (mask_model): MaskCorr(
    (mask): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 3969, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (refine_model): Refine(
    (v0): Sequential(
      (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v1): Sequential(
      (0): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v2): Sequential(
      (0): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h2): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h1): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h0): Sequential(
      (0): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (deconv): ConvTranspose2d(256, 32, kernel_size=(15, 15), stride=(15, 15))
    (post0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post1): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post2): Conv2d(4, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[2020-06-13 17:04:37,297-rk0-train_siammask_refine.py#161] (LogScheduler) lr spaces: 
[0.001      0.00104941 0.00110126 0.00115567 0.00121277 0.00127269
 0.00133557 0.00140155 0.0014708  0.00154347 0.00161973 0.00169975
 0.00178374 0.00187187 0.00196435 0.0020614  0.00216325 0.00227013
 0.0023823  0.0025    ]
[2020-06-13 17:04:37,299-rk0-train_siammask_refine.py#163] model prepare done
[2020-06-13 17:32:47,194-rk0-train_siammask_refine.py#123] 
PyTorch version: 1.0.0
Is debug build: No
CUDA used to build PyTorch: 10.0.130

OS: Ubuntu 18.04.4 LTS
GCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CMake version: version 3.10.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: Could not collect
GPU models and configuration: GPU 0: GeForce RTX 2060
Nvidia driver version: 435.21
cuDNN version: Probably one of the following:
/usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.5
/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a

Versions of relevant libraries:
[pip3] torch (1.0.0)
[conda] torch                     1.0.0                    pypi_0    pypi
[conda] torchvision               0.2.1                    pypi_0    pypi
        OpenCV (3.4.3)
[2020-06-13 17:32:47,196-rk0-train_siammask_refine.py#124] Namespace(arch='', batch=8, clip=10.0, config='config.json', epochs=20, log='log.txt', log_dir='board', lr=0.001, momentum=0.9, pretrained='', print_freq=10, resume='', save_dir='snapshot', start_epoch=0, weight_decay=0.0001, workers=20)
[2020-06-13 17:32:47,206-rk0-train_siammask_refine.py#127] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8,
        "out_size": 127,
        "seg_thr": 0.35,
        "penalty_k": 0.04,
        "window_influence": 0.4,
        "lr": 0.1
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.001,
        "end_lr": 0.0025
    },
    "loss": {
        "weight": [
            0,
            0,
            36
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "ytb_vos": {
                "root": "../../data/ytb_vos/crop511",
                "anno": "../../data/ytb_vos/train.json",
                "num_use": 100000,
                "frame_range": 20
            },
            "coco": {
                "root": "../../data/coco/crop511",
                "anno": "../../data/coco/train2017.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 143,
        "base_size": 0,
        "size": 3,
        "num": 200000,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 8,
                "scale": 0.18,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.25
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2020-06-13 17:32:47,208-rk0-train_siammask_refine.py# 79] build train dataset
[2020-06-13 17:32:47,210-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 17:32:47,692-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 17:32:47,919-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 17:32:47,919-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 17:32:50,675-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 17:32:53,946-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 17:32:54,198-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 17:33:11,980-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:33:11,980-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 17:33:11,982-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 17:33:29,962-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:33:29,963-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 17:33:29,964-rk0-train_siammask_refine.py# 83] build val dataset
[2020-06-13 17:33:29,964-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 17:33:30,464-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 17:33:30,679-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 17:33:30,679-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 17:33:33,583-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 17:33:36,822-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 17:33:37,077-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 17:33:38,027-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:33:38,027-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 17:33:38,029-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 17:33:38,955-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:33:38,955-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 17:33:38,956-rk0-train_siammask_refine.py# 94] build dataset done
[2020-06-13 17:33:39,259-rk0-features.py# 67] Current training 0 layers:
	[]
[2020-06-13 17:33:39,268-rk0-features.py# 67] Current training 1 layers:
	[ResDownS(
  (downsample): Sequential(
    (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
)]
[2020-06-13 17:33:39,327-rk0-train_siammask_refine.py#143] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (mask_model): MaskCorr(
    (mask): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 3969, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (refine_model): Refine(
    (v0): Sequential(
      (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v1): Sequential(
      (0): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v2): Sequential(
      (0): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h2): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h1): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h0): Sequential(
      (0): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (deconv): ConvTranspose2d(256, 32, kernel_size=(15, 15), stride=(15, 15))
    (post0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post1): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post2): Conv2d(4, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[2020-06-13 17:33:42,194-rk0-train_siammask_refine.py#161] (LogScheduler) lr spaces: 
[0.001      0.00104941 0.00110126 0.00115567 0.00121277 0.00127269
 0.00133557 0.00140155 0.0014708  0.00154347 0.00161973 0.00169975
 0.00178374 0.00187187 0.00196435 0.0020614  0.00216325 0.00227013
 0.0023823  0.0025    ]
[2020-06-13 17:33:42,196-rk0-train_siammask_refine.py#163] model prepare done
[2020-06-13 17:34:46,761-rk0-train_siammask_refine.py#123] 
PyTorch version: 1.0.0
Is debug build: No
CUDA used to build PyTorch: 10.0.130

OS: Ubuntu 18.04.4 LTS
GCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CMake version: version 3.10.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: Could not collect
GPU models and configuration: GPU 0: GeForce RTX 2060
Nvidia driver version: 435.21
cuDNN version: Probably one of the following:
/usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.5
/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a

Versions of relevant libraries:
[pip3] torch (1.0.0)
[conda] torch                     1.0.0                    pypi_0    pypi
[conda] torchvision               0.2.1                    pypi_0    pypi
        OpenCV (3.4.3)
[2020-06-13 17:34:46,761-rk0-train_siammask_refine.py#124] Namespace(arch='', batch=8, clip=10.0, config='config.json', epochs=20, log='log.txt', log_dir='board', lr=0.001, momentum=0.9, pretrained='', print_freq=10, resume='', save_dir='snapshot', start_epoch=0, weight_decay=0.0001, workers=20)
[2020-06-13 17:34:46,769-rk0-train_siammask_refine.py#127] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8,
        "out_size": 127,
        "seg_thr": 0.35,
        "penalty_k": 0.04,
        "window_influence": 0.4,
        "lr": 0.1
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.001,
        "end_lr": 0.0025
    },
    "loss": {
        "weight": [
            0,
            0,
            36
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "ytb_vos": {
                "root": "../../data/ytb_vos/crop511",
                "anno": "../../data/ytb_vos/train.json",
                "num_use": 100000,
                "frame_range": 20
            },
            "coco": {
                "root": "../../data/coco/crop511",
                "anno": "../../data/coco/train2017.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 143,
        "base_size": 0,
        "size": 3,
        "num": 200000,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 8,
                "scale": 0.18,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.25
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2020-06-13 17:34:46,770-rk0-train_siammask_refine.py# 79] build train dataset
[2020-06-13 17:34:46,772-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 17:34:47,244-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 17:34:47,483-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 17:34:47,483-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 17:34:50,165-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 17:34:53,387-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 17:34:53,666-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 17:35:13,526-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:35:13,527-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 17:35:13,528-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 17:35:33,116-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:35:33,117-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 17:35:33,118-rk0-train_siammask_refine.py# 83] build val dataset
[2020-06-13 17:35:33,118-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 17:35:33,666-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 17:35:33,900-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 17:35:33,901-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 17:35:36,879-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 17:35:40,177-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 17:35:40,441-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 17:35:41,421-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:35:41,421-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 17:35:41,423-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 17:35:42,420-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:35:42,420-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 17:35:42,421-rk0-train_siammask_refine.py# 94] build dataset done
[2020-06-13 17:35:42,722-rk0-features.py# 67] Current training 0 layers:
	[]
[2020-06-13 17:35:42,732-rk0-features.py# 67] Current training 1 layers:
	[ResDownS(
  (downsample): Sequential(
    (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
)]
[2020-06-13 17:35:42,797-rk0-train_siammask_refine.py#143] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (mask_model): MaskCorr(
    (mask): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 3969, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (refine_model): Refine(
    (v0): Sequential(
      (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v1): Sequential(
      (0): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v2): Sequential(
      (0): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h2): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h1): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h0): Sequential(
      (0): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (deconv): ConvTranspose2d(256, 32, kernel_size=(15, 15), stride=(15, 15))
    (post0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post1): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post2): Conv2d(4, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[2020-06-13 17:35:44,967-rk0-train_siammask_refine.py#161] (LogScheduler) lr spaces: 
[0.001      0.00104941 0.00110126 0.00115567 0.00121277 0.00127269
 0.00133557 0.00140155 0.0014708  0.00154347 0.00161973 0.00169975
 0.00178374 0.00187187 0.00196435 0.0020614  0.00216325 0.00227013
 0.0023823  0.0025    ]
[2020-06-13 17:35:44,969-rk0-train_siammask_refine.py#163] model prepare done
[2020-06-13 17:38:48,797-rk0-train_siammask_refine.py#123] 
PyTorch version: 1.0.0
Is debug build: No
CUDA used to build PyTorch: 10.0.130

OS: Ubuntu 18.04.4 LTS
GCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CMake version: version 3.10.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: Could not collect
GPU models and configuration: GPU 0: GeForce RTX 2060
Nvidia driver version: 435.21
cuDNN version: Probably one of the following:
/usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.5
/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a

Versions of relevant libraries:
[pip3] torch (1.0.0)
[conda] torch                     1.0.0                    pypi_0    pypi
[conda] torchvision               0.2.1                    pypi_0    pypi
        OpenCV (3.4.3)
[2020-06-13 17:38:48,798-rk0-train_siammask_refine.py#124] Namespace(arch='', batch=8, clip=10.0, config='config.json', epochs=20, log='log.txt', log_dir='board', lr=0.001, momentum=0.9, pretrained='', print_freq=10, resume='', save_dir='snapshot', start_epoch=0, weight_decay=0.0001, workers=20)
[2020-06-13 17:38:48,806-rk0-train_siammask_refine.py#127] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8,
        "out_size": 127,
        "seg_thr": 0.35,
        "penalty_k": 0.04,
        "window_influence": 0.4,
        "lr": 0.1
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.001,
        "end_lr": 0.0025
    },
    "loss": {
        "weight": [
            0,
            0,
            36
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "ytb_vos": {
                "root": "../../data/ytb_vos/crop511",
                "anno": "../../data/ytb_vos/train.json",
                "num_use": 100000,
                "frame_range": 20
            },
            "coco": {
                "root": "../../data/coco/crop511",
                "anno": "../../data/coco/train2017.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 143,
        "base_size": 0,
        "size": 3,
        "num": 200000,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 8,
                "scale": 0.18,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.25
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2020-06-13 17:38:48,808-rk0-train_siammask_refine.py# 79] build train dataset
[2020-06-13 17:38:48,809-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 17:38:49,307-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 17:38:49,550-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 17:38:49,550-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 17:38:52,412-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 17:38:55,910-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 17:38:56,194-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 17:39:16,919-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:39:16,919-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 17:39:16,921-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 17:39:36,405-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:39:36,405-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 17:39:36,406-rk0-train_siammask_refine.py# 83] build val dataset
[2020-06-13 17:39:36,407-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 17:39:36,939-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 17:39:37,169-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 17:39:37,169-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 17:39:40,204-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 17:39:43,492-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 17:39:43,754-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 17:39:44,710-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:39:44,710-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 17:39:44,711-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 17:39:45,712-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:39:45,712-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 17:39:45,713-rk0-train_siammask_refine.py# 94] build dataset done
[2020-06-13 17:39:45,995-rk0-features.py# 67] Current training 0 layers:
	[]
[2020-06-13 17:39:46,004-rk0-features.py# 67] Current training 1 layers:
	[ResDownS(
  (downsample): Sequential(
    (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
)]
[2020-06-13 17:39:46,070-rk0-train_siammask_refine.py#143] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (mask_model): MaskCorr(
    (mask): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 3969, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (refine_model): Refine(
    (v0): Sequential(
      (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v1): Sequential(
      (0): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v2): Sequential(
      (0): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h2): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h1): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h0): Sequential(
      (0): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (deconv): ConvTranspose2d(256, 32, kernel_size=(15, 15), stride=(15, 15))
    (post0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post1): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post2): Conv2d(4, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[2020-06-13 17:39:48,106-rk0-train_siammask_refine.py#161] (LogScheduler) lr spaces: 
[0.001      0.00104941 0.00110126 0.00115567 0.00121277 0.00127269
 0.00133557 0.00140155 0.0014708  0.00154347 0.00161973 0.00169975
 0.00178374 0.00187187 0.00196435 0.0020614  0.00216325 0.00227013
 0.0023823  0.0025    ]
[2020-06-13 17:39:48,108-rk0-train_siammask_refine.py#163] model prepare done
[2020-06-13 17:46:15,193-rk0-train_siammask_refine.py#123] 
PyTorch version: 1.0.0
Is debug build: No
CUDA used to build PyTorch: 10.0.130

OS: Ubuntu 18.04.4 LTS
GCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CMake version: version 3.10.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: Could not collect
GPU models and configuration: GPU 0: GeForce RTX 2060
Nvidia driver version: 435.21
cuDNN version: Probably one of the following:
/usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.5
/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a

Versions of relevant libraries:
[pip3] torch (1.0.0)
[conda] torch                     1.0.0                    pypi_0    pypi
[conda] torchvision               0.2.1                    pypi_0    pypi
        OpenCV (3.4.3)
[2020-06-13 17:46:15,194-rk0-train_siammask_refine.py#124] Namespace(arch='', batch=8, clip=10.0, config='config.json', epochs=20, log='log.txt', log_dir='board', lr=0.001, momentum=0.9, pretrained='', print_freq=10, resume='', save_dir='snapshot', start_epoch=0, weight_decay=0.0001, workers=20)
[2020-06-13 17:46:15,201-rk0-train_siammask_refine.py#127] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8,
        "out_size": 127,
        "seg_thr": 0.35,
        "penalty_k": 0.04,
        "window_influence": 0.4,
        "lr": 0.1
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.001,
        "end_lr": 0.0025
    },
    "loss": {
        "weight": [
            0,
            0,
            36
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "ytb_vos": {
                "root": "../../data/ytb_vos/crop511",
                "anno": "../../data/ytb_vos/train.json",
                "num_use": 100000,
                "frame_range": 20
            },
            "coco": {
                "root": "../../data/coco/crop511",
                "anno": "../../data/coco/train2017.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 143,
        "base_size": 0,
        "size": 3,
        "num": 200000,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 8,
                "scale": 0.18,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.25
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2020-06-13 17:46:15,203-rk0-train_siammask_refine.py# 79] build train dataset
[2020-06-13 17:46:15,204-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 17:46:15,671-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 17:46:15,889-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 17:46:15,890-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 17:46:18,596-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 17:46:22,112-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 17:46:22,443-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 17:46:41,283-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:46:41,283-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 17:46:41,285-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 17:47:00,606-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:47:00,607-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 17:47:00,608-rk0-train_siammask_refine.py# 83] build val dataset
[2020-06-13 17:47:00,609-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 17:47:01,156-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 17:47:01,382-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 17:47:01,382-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 17:47:04,349-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 17:47:07,660-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 17:47:07,927-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 17:47:08,926-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:47:08,926-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 17:47:08,928-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 17:47:09,925-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:47:09,925-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 17:47:09,926-rk0-train_siammask_refine.py# 94] build dataset done
[2020-06-13 17:47:10,224-rk0-features.py# 67] Current training 0 layers:
	[]
[2020-06-13 17:47:10,233-rk0-features.py# 67] Current training 1 layers:
	[ResDownS(
  (downsample): Sequential(
    (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
)]
[2020-06-13 17:47:10,294-rk0-train_siammask_refine.py#143] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (mask_model): MaskCorr(
    (mask): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 3969, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (refine_model): Refine(
    (v0): Sequential(
      (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v1): Sequential(
      (0): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v2): Sequential(
      (0): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h2): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h1): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h0): Sequential(
      (0): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (deconv): ConvTranspose2d(256, 32, kernel_size=(15, 15), stride=(15, 15))
    (post0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post1): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post2): Conv2d(4, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[2020-06-13 17:47:12,342-rk0-train_siammask_refine.py#161] (LogScheduler) lr spaces: 
[0.001      0.00104941 0.00110126 0.00115567 0.00121277 0.00127269
 0.00133557 0.00140155 0.0014708  0.00154347 0.00161973 0.00169975
 0.00178374 0.00187187 0.00196435 0.0020614  0.00216325 0.00227013
 0.0023823  0.0025    ]
[2020-06-13 17:47:12,344-rk0-train_siammask_refine.py#163] model prepare done
[2020-06-13 17:58:59,631-rk0-train_siammask_refine.py#123] 
PyTorch version: 1.0.0
Is debug build: No
CUDA used to build PyTorch: 10.0.130

OS: Ubuntu 18.04.4 LTS
GCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
CMake version: version 3.10.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: Could not collect
GPU models and configuration: GPU 0: GeForce RTX 2060
Nvidia driver version: 435.21
cuDNN version: Probably one of the following:
/usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.5
/usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a

Versions of relevant libraries:
[pip3] torch (1.0.0)
[conda] torch                     1.0.0                    pypi_0    pypi
[conda] torchvision               0.2.1                    pypi_0    pypi
        OpenCV (3.4.3)
[2020-06-13 17:58:59,631-rk0-train_siammask_refine.py#124] Namespace(arch='', batch=8, clip=10.0, config='config.json', epochs=20, log='log.txt', log_dir='board', lr=0.001, momentum=0.9, pretrained='', print_freq=10, resume='', save_dir='snapshot', start_epoch=0, weight_decay=0.0001, workers=20)
[2020-06-13 17:58:59,639-rk0-train_siammask_refine.py#127] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8,
        "out_size": 127,
        "seg_thr": 0.35,
        "penalty_k": 0.04,
        "window_influence": 0.4,
        "lr": 0.1
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.001,
        "end_lr": 0.0025
    },
    "loss": {
        "weight": [
            0,
            0,
            36
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "ytb_vos": {
                "root": "../../data/ytb_vos/crop511",
                "anno": "../../data/ytb_vos/train.json",
                "num_use": 100000,
                "frame_range": 20
            },
            "coco": {
                "root": "../../data/coco/crop511",
                "anno": "../../data/coco/train2017.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 143,
        "base_size": 0,
        "size": 3,
        "num": 200000,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 8,
                "scale": 0.18,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.25
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2020-06-13 17:58:59,640-rk0-train_siammask_refine.py# 79] build train dataset
[2020-06-13 17:58:59,642-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 17:59:00,102-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 17:59:00,316-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 17:59:00,317-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 17:59:03,009-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 17:59:06,143-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 17:59:06,419-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 17:59:24,187-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:59:24,187-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 17:59:24,189-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 17:59:41,817-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:59:41,817-rk0-siam_mask_dataset.py#511] dataset length 4000000
[2020-06-13 17:59:41,818-rk0-train_siammask_refine.py# 83] build val dataset
[2020-06-13 17:59:41,819-rk0-siam_mask_dataset.py# 36] loading ../../data/ytb_vos/train.json
[2020-06-13 17:59:42,314-rk0-siam_mask_dataset.py# 74] ../../data/ytb_vos/train.json loaded.
[2020-06-13 17:59:42,537-rk0-siam_mask_dataset.py#135] SubDataSet ytb_vos start-index 0 select [100000/3000] path {}.{}.{}.jpg
[2020-06-13 17:59:42,537-rk0-siam_mask_dataset.py# 36] loading ../../data/coco/train2017.json
[2020-06-13 17:59:45,375-rk0-siam_mask_dataset.py#119] Error, coco train2017/000000512390 12 [366.3, 120.6, 372.24, 120.6]
[2020-06-13 17:59:48,556-rk0-siam_mask_dataset.py# 74] ../../data/coco/train2017.json loaded.
[2020-06-13 17:59:48,810-rk0-siam_mask_dataset.py#135] SubDataSet coco start-index 3000 select [117266/117266] path {}.{}.{}.jpg
[2020-06-13 17:59:49,735-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:59:49,735-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 17:59:49,736-rk0-siam_mask_dataset.py#479] dataset informations: 
{
    "template": 127,
    "search": 143,
    "template_small": false,
    "gray": 0.25,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 200000
}
[2020-06-13 17:59:50,697-rk0-siam_mask_dataset.py#510] shuffle done!
[2020-06-13 17:59:50,697-rk0-siam_mask_dataset.py#511] dataset length 200000
[2020-06-13 17:59:50,698-rk0-train_siammask_refine.py# 94] build dataset done
[2020-06-13 18:01:38,518-rk0-features.py# 67] Current training 0 layers:
	[]
[2020-06-13 18:01:38,528-rk0-features.py# 67] Current training 1 layers:
	[ResDownS(
  (downsample): Sequential(
    (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
)]
[2020-06-13 18:01:38,592-rk0-train_siammask_refine.py#143] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (mask_model): MaskCorr(
    (mask): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 3969, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (refine_model): Refine(
    (v0): Sequential(
      (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v1): Sequential(
      (0): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (v2): Sequential(
      (0): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h2): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h1): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (h0): Sequential(
      (0): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(4, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
    )
    (deconv): ConvTranspose2d(256, 32, kernel_size=(15, 15), stride=(15, 15))
    (post0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post1): Conv2d(16, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (post2): Conv2d(4, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[2020-06-13 18:01:41,948-rk0-train_siammask_refine.py#161] (LogScheduler) lr spaces: 
[0.001      0.00104941 0.00110126 0.00115567 0.00121277 0.00127269
 0.00133557 0.00140155 0.0014708  0.00154347 0.00161973 0.00169975
 0.00178374 0.00187187 0.00196435 0.0020614  0.00216325 0.00227013
 0.0023823  0.0025    ]
[2020-06-13 18:01:41,950-rk0-train_siammask_refine.py#163] model prepare done
